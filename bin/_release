#!/usr/bin/env node
const fs = require('fs')
const path = require('path')
const { promisify } = require('util')

const glob = promisify(require('glob'))
const shell = require('shelljs')

const { getPackages } = require('../scripts/utils')

const cwd = process.cwd()

process.env.PATH = `${cwd}/bin:${cwd}/node_modules/.bin:${process.env.PATH}`

const { NO_CLEAN } = process.env

shell.config.verbose = true
shell.config.fatal = true

ensureCleanIndex()

const { gitTag } = checkVersion()

let packages
;(async (ps) => {
  packages = await getPackages()

  gitDetatch()

  if (NO_CLEAN !== 'true') {
    clean()
  }

  await runBuild()

  commitAndTag()
  pushAndPublish()
})().catch((error) => {
  console.error(error)

  process.exit(1)
})

function ensureCleanIndex () {
  // make sure the repo is clean
  try {
    shell.exec('git diff-index -G . HEAD --stat --exit-code')
  } catch {
    throw new Error('working directory must be clean')
  }
}

function checkVersion () {
  const getVersion = require('../scripts/getVersion')
  const version = require('semver').clean(getVersion())

  if (!version) {
    throw new Error('failed to parse version')
  }

  return {
    version,
    gitTag: 'v' + version,
  }
}

function gitDetatch () {
  shell.exec('git checkout --detach')
}

function clean () {
  shell.exec('_clean')
}

async function runBuild () {
  // copy README to interactjs package
  for (const p of await glob('packages/{@interactjs/,}interactjs')) {
    fs.copyFileSync(`${cwd}/README.md`, `${p}/README.md`)
  }

  // copy license file and npmignore to all packages
  for (const pkg of packages) {
    try {
      fs.copyFileSync('LICENSE', pkg + '/LICENSE')
    } catch {
      fs.copyFileSync('LICENSE.md', pkg + '/LICENSE.md')
    }
    fs.copyFileSync('.npmignore', pkg + '/.npmignore')
  }

  // create @interactjs/**/use/* modules
  shell.exec('_add_plugin_indexes')

  // generate esnext .js modules
  shell.exec('_esnext')

  // bundle interactjs, generate docs, transpile modules, generate declaration files
  shell.exec('npm run build')
}

function commitAndTag () {
  // commit and add new version tag
  shell.exec('git add --all .')
  shell.exec('git add --force packages')
  shell.exec('git reset **/node_modules')
  shell.exec(`git commit --no-verify -m ${gitTag}`)
  shell.exec(`git tag ${gitTag}`)
}

function pushAndPublish () {
  const { NPM_TAG } = process.env

  try {
    shell.exec(`git push --no-verify origin ${gitTag}`)
  } catch {
    throw new Error(`failed to push git tag ${gitTag} to origin`)
  }

  shell.exec('_set_git_head')

  const npmPublishCommand = 'npm publish' + (NPM_TAG ? ` --tag ${NPM_TAG}` : '')

  for (const pkg of packages) {
    shell.exec(npmPublishCommand, { cwd: path.resolve(pkg) })
  }

  shell.exec('git checkout $(git ls-files "**package.json")')
}
