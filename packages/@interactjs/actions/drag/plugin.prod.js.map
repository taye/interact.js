{"version":3,"file":"plugin.prod.js","sources":["plugin.ts"],"sourcesContent":["import type { Interactable } from '@interactjs/core/Interactable'\nimport type { InteractEvent } from '@interactjs/core/InteractEvent'\nimport type { PerActionDefaults } from '@interactjs/core/options'\nimport type { Scope, Plugin } from '@interactjs/core/scope'\nimport type { ListenersArg, OrBoolean } from '@interactjs/core/types'\nimport is from '@interactjs/utils/is'\n\ndeclare module '@interactjs/core/Interactable' {\n  interface Interactable {\n    draggable(options: Partial<OrBoolean<DraggableOptions>> | boolean): this\n    draggable(): DraggableOptions\n    /**\n     * ```js\n     * interact(element).draggable({\n     *     onstart: function (event) {},\n     *     onmove : function (event) {},\n     *     onend  : function (event) {},\n     *\n     *     // the axis in which the first movement must be\n     *     // for the drag sequence to start\n     *     // 'xy' by default - any direction\n     *     startAxis: 'x' || 'y' || 'xy',\n     *\n     *     // 'xy' by default - don't restrict to one axis (move in any direction)\n     *     // 'x' or 'y' to restrict movement to either axis\n     *     // 'start' to restrict movement to the axis the drag started in\n     *     lockAxis: 'x' || 'y' || 'xy' || 'start',\n     *\n     *     // max number of drags that can happen concurrently\n     *     // with elements of this Interactable. Infinity by default\n     *     max: Infinity,\n     *\n     *     // max number of drags that can target the same element+Interactable\n     *     // 1 by default\n     *     maxPerElement: 2\n     * })\n     *\n     * var isDraggable = interact('element').draggable(); // true\n     * ```\n     *\n     * Get or set whether drag actions can be performed on the target\n     *\n     * @param options - true/false or An object with event\n     * listeners to be fired on drag events (object makes the Interactable\n     * draggable)\n     */\n    draggable(options?: Partial<OrBoolean<DraggableOptions>> | boolean): this | DraggableOptions\n  }\n}\n\ndeclare module '@interactjs/core/options' {\n  interface ActionDefaults {\n    drag: DraggableOptions\n  }\n}\n\ndeclare module '@interactjs/core/types' {\n  interface ActionMap {\n    drag?: typeof drag\n  }\n}\n\nexport type DragEvent = InteractEvent<'drag'>\n\nexport interface DraggableOptions extends PerActionDefaults {\n  startAxis?: 'x' | 'y' | 'xy'\n  lockAxis?: 'x' | 'y' | 'xy' | 'start'\n  oninertiastart?: ListenersArg\n  onstart?: ListenersArg\n  onmove?: ListenersArg\n  onend?: ListenersArg\n}\n\nfunction install(scope: Scope) {\n  const { actions, Interactable, defaults } = scope\n\n  Interactable.prototype.draggable = drag.draggable\n\n  actions.map.drag = drag\n  actions.methodDict.drag = 'draggable'\n\n  defaults.actions.drag = drag.defaults\n}\n\nfunction beforeMove({ interaction }) {\n  if (interaction.prepared.name !== 'drag') return\n\n  const axis = interaction.prepared.axis\n\n  if (axis === 'x') {\n    interaction.coords.cur.page.y = interaction.coords.start.page.y\n    interaction.coords.cur.client.y = interaction.coords.start.client.y\n\n    interaction.coords.velocity.client.y = 0\n    interaction.coords.velocity.page.y = 0\n  } else if (axis === 'y') {\n    interaction.coords.cur.page.x = interaction.coords.start.page.x\n    interaction.coords.cur.client.x = interaction.coords.start.client.x\n\n    interaction.coords.velocity.client.x = 0\n    interaction.coords.velocity.page.x = 0\n  }\n}\n\nfunction move({ iEvent, interaction }) {\n  if (interaction.prepared.name !== 'drag') return\n\n  const axis = interaction.prepared.axis\n\n  if (axis === 'x' || axis === 'y') {\n    const opposite = axis === 'x' ? 'y' : 'x'\n\n    iEvent.page[opposite] = interaction.coords.start.page[opposite]\n    iEvent.client[opposite] = interaction.coords.start.client[opposite]\n    iEvent.delta[opposite] = 0\n  }\n}\n\nconst draggable: Interactable['draggable'] = function draggable(\n  this: Interactable,\n  options?: DraggableOptions | boolean,\n): any {\n  if (is.object(options)) {\n    this.options.drag.enabled = options.enabled !== false\n    this.setPerAction('drag', options)\n    this.setOnEvents('drag', options)\n\n    if (/^(xy|x|y|start)$/.test(options.lockAxis)) {\n      this.options.drag.lockAxis = options.lockAxis\n    }\n    if (/^(xy|x|y)$/.test(options.startAxis)) {\n      this.options.drag.startAxis = options.startAxis\n    }\n\n    return this\n  }\n\n  if (is.bool(options)) {\n    this.options.drag.enabled = options\n\n    return this\n  }\n\n  return this.options.drag as DraggableOptions\n}\n\nconst drag: Plugin = {\n  id: 'actions/drag',\n  install,\n  listeners: {\n    'interactions:before-action-move': beforeMove,\n    'interactions:action-resume': beforeMove,\n\n    // dragmove\n    'interactions:action-move': move,\n    'auto-start:check': (arg) => {\n      const { interaction, interactable, buttons } = arg\n      const dragOptions = interactable.options.drag\n\n      if (\n        !(dragOptions && dragOptions.enabled) ||\n        // check mouseButton setting if the pointer is down\n        (interaction.pointerIsDown &&\n          /mouse|pointer/.test(interaction.pointerType) &&\n          (buttons & interactable.options.drag.mouseButtons) === 0)\n      ) {\n        return undefined\n      }\n\n      arg.action = {\n        name: 'drag',\n        axis: dragOptions.lockAxis === 'start' ? dragOptions.startAxis : dragOptions.lockAxis,\n      }\n\n      return false\n    },\n  },\n  draggable,\n  beforeMove,\n  move,\n  defaults: {\n    startAxis: 'xy',\n    lockAxis: 'xy',\n  } as DraggableOptions,\n\n  getCursor() {\n    return 'move'\n  },\n\n  filterEventType: (type: string) => type.search('drag') === 0,\n}\n\nexport default drag\n"],"names":["install","actions","Interactable","defaults","prototype","draggable","drag","map","methodDict","beforeMove","_ref","interaction","prepared","name","axis","coords","cur","page","y","start","client","velocity","x","move","_ref2","iEvent","opposite","options","object","enabled","this","setPerAction","test","lockAxis","startAxis","is","bool","id","arg","interactable","buttons","dragOptions","pointerIsDown","pointerType","mouseButtons","action","getCursor","type","search"],"mappings":";;2DAyESA,MAAAA,QACDC,EAAAC,aAAED,EAAOE,SAAED,GAAcC,EAAUD,EAAQE,UAAAC,UAAAC,KAAAD,UAEjDH,EAAAA,IAAYI,KAAUA,KAEtBL,EAAQM,WAAWD,KAAI,YACvBL,EAAQO,QAAAA,KAAeF,aAEvBH,CACF,SAAAM,WAAAC,GAESD,IAAAA,YAAWE,GAAEA,EAAa,GAAA,SAAAD,EAAAE,SAAAC,KAAA,OACjC,UAAyBA,SAASC,KAErBH,MAAbG,GAEIA,EAASC,OAAKC,IAAAC,KAAAC,EAAAP,EAAAI,OAAAI,MAAAF,KAAAC,EAChBP,EAAYI,OAAOC,IAAIC,SAAoBN,SAAQQ,MAAUC,OAAEF,EAC/DP,EAAYI,OAAOC,gBAA0BE,EAAA,EAE7CP,EAAYI,OAAOM,SAASD,KAAAA,EAAW,GACrB,MAAlBT,IACKA,EAAQI,WAAUE,KAAAK,EAAAX,EAAAI,OAAAI,MAAAF,KAAAK,EACvBX,EAAYI,OAAOC,IAAIC,SAAoBN,SAAQQ,MAAUC,OAAEE,EAC/DX,EAAYI,OAAOC,gBAA0BM,EAAA,EAE7CX,EAAYI,OAAOM,SAASD,KAAAA,EAAW,EAEzC,CACF,SAAAG,KAAAC,GAESD,IAAAA,OAAKE,EAAAd,YAAEc,GAAQd,EAAa,GAAA,SAAAa,EAAAZ,SAAAC,KAAA,OACnC,UAAyBA,SAASC,KAElC,GAAaH,MAAbG,GAAiC,MAApBH,EAAqBG,CAElC,MAAQY,EAAgB,QAAU,IAAA,IAChCD,EAAcR,KAAAS,GAAOf,EAAiBI,OAAGI,MAAAF,KAAAS,GAEzCD,EAAOR,OAAKS,GAAYf,EAAYI,OAAYI,aAAMO,GACtDD,EAAOL,MAAMM,GAAaf,CAC1Bc,CACF,CACF,MAAApB,UAAA,SAAAsB,GAEA,OAAMtB,UAAuCsB,SAIpCC,QAAOD,KAAAA,SAAU,IAAAA,EAAAE,QACtBC,KAAKH,aAAaE,OAAOF,GACzBG,KAAKC,YAAY,OAASJ,GACtB,mBAAmBK,KAAEL,EAAQM,YAEjCH,2BAAmCH,EAASM,UAE5C,aAAAD,KAAAL,EAAAO,aACAJ,kBAAiBE,UAAsBL,EAACO,WAExCJ,MAGFK,GAAAC,KAAAT,SAEOS,QAAKT,KAAQE,QAAEF,EACRG,MAGdA,KAAAH,QAAArB,IAEA,EACDA,KAAA,CAED+B,GAAM/B,eACJ+B,gBACArC,UAAO,mCACIS,WACT,6BAAAA,WAGA,2BAAAc,KACA,kBAoBE,CApBFe,GACA,MAAA3B,YACQA,EAAA4B,aAAE5B,EAAW6B,QAAED,GAAcC,IAAeD,EAAAZ,QAAArB,KAClD,GAAMmC,GAAcF,EAAaZ,WAI/BhB,EAAA+B,gBAAA,gBAAAV,KAAArB,EAAAgC,cAAA,IAAAH,EAAAD,EAAAZ,QAAArB,KAAAsC,sBAMFN,EAAAO,OAAA,CAEAP,KAAIO,OACFhC,KAAY,UAAN4B,EAAMR,SAAAQ,EAAAP,UAAAO,EAAAR,WAEb,CAAA,GAIJ5B,oBACDA,sBACAI,UACAc,SAAI,WACM,KACRW,eAEmBY,UAAA,IAEZA,OAER,eAAA,CAAAC,GAAAA,OAAA,IAAAA,EAAAC,OAAA,iBAGH1C"}