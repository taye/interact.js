{"version":3,"file":"InteractStatic.js","sources":["InteractStatic.ts"],"sourcesContent":["import browser from '@interactjs/utils/browser'\nimport * as domUtils from '@interactjs/utils/domUtils'\nimport is from '@interactjs/utils/is'\nimport isNonNativeEvent from '@interactjs/utils/isNonNativeEvent'\nimport { warnOnce } from '@interactjs/utils/misc'\nimport * as pointerUtils from '@interactjs/utils/pointerUtils'\n\nimport type { Scope, Plugin } from '@interactjs/core/scope'\nimport type { Context, EventTypes, Listener, ListenersArg, Target } from '@interactjs/core/types'\n\nimport type { Interactable } from './Interactable'\nimport type { Options } from './options'\n\n/**\n * ```js\n * interact('#draggable').draggable(true)\n *\n * var rectables = interact('rect')\n * rectables\n *   .gesturable(true)\n *   .on('gesturemove', function (event) {\n *       // ...\n *   })\n * ```\n *\n * The methods of this variable can be used to set elements as interactables\n * and also to change various default settings.\n *\n * Calling it as a function and passing an element or a valid CSS selector\n * string returns an Interactable object which has various methods to configure\n * it.\n *\n * @param {Element | string} target The HTML or SVG Element to interact with\n * or CSS selector\n * @return {Interactable}\n */\nexport interface InteractStatic {\n  (target: Target, options?: Options): Interactable\n  getPointerAverage: typeof pointerUtils.pointerAverage\n  getTouchBBox: typeof pointerUtils.touchBBox\n  getTouchDistance: typeof pointerUtils.touchDistance\n  getTouchAngle: typeof pointerUtils.touchAngle\n  getElementRect: typeof domUtils.getElementRect\n  getElementClientRect: typeof domUtils.getElementClientRect\n  matchesSelector: typeof domUtils.matchesSelector\n  closest: typeof domUtils.closest\n  /** @internal */ globalEvents: any\n  version: string\n  /** @internal */ scope: Scope\n  /**\n   * Use a plugin\n   */\n  use(\n    plugin: Plugin,\n    options?: {\n      [key: string]: any\n    },\n  ): any\n  /**\n   * Check if an element or selector has been set with the `interact(target)`\n   * function\n   *\n   * @return {boolean} Indicates if the element or CSS selector was previously\n   * passed to interact\n   */\n  isSet(\n    /* The Element or string being searched for */\n    target: Target,\n    options?: any,\n  ): boolean\n  on(type: string | EventTypes, listener: ListenersArg, options?: object): any\n  off(type: EventTypes, listener: any, options?: object): any\n  debug(): any\n  /**\n   * Whether or not the browser supports touch input\n   */\n  supportsTouch(): boolean\n  /**\n   * Whether or not the browser supports PointerEvents\n   */\n  supportsPointerEvent(): boolean\n  /**\n   * Cancels all interactions (end events are not fired)\n   */\n  stop(): InteractStatic\n  /**\n   * Returns or sets the distance the pointer must be moved before an action\n   * sequence occurs. This also affects tolerance for tap events.\n   */\n  pointerMoveTolerance(\n    /** The movement from the start position must be greater than this value */\n    newValue?: number,\n  ): InteractStatic | number\n  addDocument(doc: Document, options?: object): void\n  removeDocument(doc: Document): void\n}\n\nexport function createInteractStatic(scope: Scope): InteractStatic {\n  const interact = ((target: Target, options: Options) => {\n    let interactable = scope.interactables.getExisting(target, options)\n\n    if (!interactable) {\n      interactable = scope.interactables.new(target, options)\n      interactable.events.global = interact.globalEvents\n    }\n\n    return interactable\n  }) as InteractStatic\n\n  // expose the functions used to calculate multi-touch properties\n  interact.getPointerAverage = pointerUtils.pointerAverage\n  interact.getTouchBBox = pointerUtils.touchBBox\n  interact.getTouchDistance = pointerUtils.touchDistance\n  interact.getTouchAngle = pointerUtils.touchAngle\n\n  interact.getElementRect = domUtils.getElementRect\n  interact.getElementClientRect = domUtils.getElementClientRect\n  interact.matchesSelector = domUtils.matchesSelector\n  interact.closest = domUtils.closest\n\n  interact.globalEvents = {} as any\n\n  // eslint-disable-next-line no-undef\n  interact.version = process.env.npm_package_version\n  interact.scope = scope\n  interact.use = function (plugin, options) {\n    this.scope.usePlugin(plugin, options)\n\n    return this\n  }\n\n  interact.isSet = function (target: Target, options?: { context?: Context }): boolean {\n    return !!this.scope.interactables.get(target, options && options.context)\n  }\n\n  interact.on = warnOnce(function on(type: string | EventTypes, listener: ListenersArg, options?: object) {\n    if (is.string(type) && type.search(' ') !== -1) {\n      type = type.trim().split(/ +/)\n    }\n\n    if (is.array(type)) {\n      for (const eventType of type as any[]) {\n        this.on(eventType, listener, options)\n      }\n\n      return this\n    }\n\n    if (is.object(type)) {\n      for (const prop in type) {\n        this.on(prop, (type as any)[prop], listener)\n      }\n\n      return this\n    }\n\n    // if it is an InteractEvent type, add listener to globalEvents\n    if (isNonNativeEvent(type, this.scope.actions)) {\n      // if this type of event was never bound\n      if (!this.globalEvents[type]) {\n        this.globalEvents[type] = [listener]\n      } else {\n        this.globalEvents[type].push(listener)\n      }\n    }\n    // If non InteractEvent type, addEventListener to document\n    else {\n      this.scope.events.add(this.scope.document, type, listener as Listener, { options })\n    }\n\n    return this\n  }, 'The interact.on() method is being deprecated')\n\n  interact.off = warnOnce(function off(type: EventTypes, listener: any, options?: object) {\n    if (is.string(type) && type.search(' ') !== -1) {\n      type = type.trim().split(/ +/)\n    }\n\n    if (is.array(type)) {\n      for (const eventType of type) {\n        this.off(eventType, listener, options)\n      }\n\n      return this\n    }\n\n    if (is.object(type)) {\n      for (const prop in type) {\n        this.off(prop, type[prop], listener)\n      }\n\n      return this\n    }\n\n    if (isNonNativeEvent(type, this.scope.actions)) {\n      let index: number\n\n      if (type in this.globalEvents && (index = this.globalEvents[type].indexOf(listener)) !== -1) {\n        this.globalEvents[type].splice(index, 1)\n      }\n    } else {\n      this.scope.events.remove(this.scope.document, type, listener, options)\n    }\n\n    return this\n  }, 'The interact.off() method is being deprecated')\n\n  interact.debug = function () {\n    return this.scope\n  }\n\n  interact.supportsTouch = function () {\n    return browser.supportsTouch\n  }\n\n  interact.supportsPointerEvent = function () {\n    return browser.supportsPointerEvent\n  }\n\n  interact.stop = function () {\n    for (const interaction of this.scope.interactions.list) {\n      interaction.stop()\n    }\n\n    return this\n  }\n\n  interact.pointerMoveTolerance = function (newValue?: number) {\n    if (is.number(newValue)) {\n      this.scope.interactions.pointerMoveTolerance = newValue\n\n      return this\n    }\n\n    return this.scope.interactions.pointerMoveTolerance\n  }\n\n  interact.addDocument = function (doc: Document, options?: object) {\n    this.scope.addDocument(doc, options)\n  }\n\n  interact.removeDocument = function (doc: Document) {\n    this.scope.removeDocument(doc)\n  }\n\n  return interact\n}\n"],"names":["createInteractStatic","scope","interact","target","options","interactable","interactables","getExisting","new","events","global","globalEvents","getPointerAverage","pointerUtils","pointerAverage","getTouchBBox","touchBBox","getTouchDistance","touchDistance","getTouchAngle","touchAngle","getElementRect","domUtils","getElementClientRect","matchesSelector","closest","version","process","use","plugin","usePlugin","isSet","get","context","on","warnOnce","type","listener","is","string","search","trim","split","array","eventType","object","prop","isNonNativeEvent","actions","push","add","document","off","index","indexOf","splice","remove","debug","supportsTouch","browser","supportsPointerEvent","stop","interaction","interactions","list","pointerMoveTolerance","newValue","number","addDocument","doc","removeDocument"],"mappings":"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"}