{"version":3,"file":"interactablePreventDefault.prod.js","sources":["interactablePreventDefault.ts"],"sourcesContent":["import { matchesSelector, nodeContains } from '@interactjs/utils/domUtils'\nimport is from '@interactjs/utils/is'\nimport { getWindow } from '@interactjs/utils/window'\n\nimport type { Interactable } from '@interactjs/core/Interactable'\nimport type Interaction from '@interactjs/core/Interaction'\nimport type { Scope } from '@interactjs/core/scope'\nimport type { PointerEventType } from '@interactjs/core/types'\n\ntype PreventDefaultValue = 'always' | 'never' | 'auto'\n\ndeclare module '@interactjs/core/Interactable' {\n  interface Interactable {\n    preventDefault(newValue: PreventDefaultValue): this\n    preventDefault(): PreventDefaultValue\n    /**\n     * Returns or sets whether to prevent the browser's default behaviour in\n     * response to pointer events. Can be set to:\n     *  - `'always'` to always prevent\n     *  - `'never'` to never prevent\n     *  - `'auto'` to let interact.js try to determine what would be best\n     *\n     * @param newValue - `'always'`, `'never'` or `'auto'`\n     * @returns The current setting or this Interactable\n     */\n    preventDefault(newValue?: PreventDefaultValue): PreventDefaultValue | this\n    checkAndPreventDefault(event: Event): void\n  }\n}\n\nconst preventDefault = function preventDefault(this: Interactable, newValue?: PreventDefaultValue) {\n  if (/^(always|never|auto)$/.test(newValue)) {\n    this.options.preventDefault = newValue\n    return this\n  }\n\n  if (is.bool(newValue)) {\n    this.options.preventDefault = newValue ? 'always' : 'never'\n    return this\n  }\n\n  return this.options.preventDefault\n} as Interactable['preventDefault']\n\nfunction checkAndPreventDefault(interactable: Interactable, scope: Scope, event: Event) {\n  const setting = interactable.options.preventDefault\n\n  if (setting === 'never') return\n\n  if (setting === 'always') {\n    event.preventDefault()\n    return\n  }\n\n  // setting === 'auto'\n\n  // if the browser supports passive event listeners and isn't running on iOS,\n  // don't preventDefault of touch{start,move} events. CSS touch-action and\n  // user-select should be used instead of calling event.preventDefault().\n  if (scope.events.supportsPassive && /^touch(start|move)$/.test(event.type)) {\n    const doc = getWindow(event.target).document\n    const docOptions = scope.getDocOptions(doc)\n\n    if (!(docOptions && docOptions.events) || docOptions.events.passive !== false) {\n      return\n    }\n  }\n\n  // don't preventDefault of pointerdown events\n  if (/^(mouse|pointer|touch)*(down|start)/i.test(event.type)) {\n    return\n  }\n\n  // don't preventDefault on editable elements\n  if (\n    is.element(event.target) &&\n    matchesSelector(event.target, 'input,select,textarea,[contenteditable=true],[contenteditable=true] *')\n  ) {\n    return\n  }\n\n  event.preventDefault()\n}\n\nfunction onInteractionEvent({ interaction, event }: { interaction: Interaction; event: PointerEventType }) {\n  if (interaction.interactable) {\n    interaction.interactable.checkAndPreventDefault(event as Event)\n  }\n}\n\nexport function install(scope: Scope) {\n  const { Interactable } = scope\n\n  Interactable.prototype.preventDefault = preventDefault\n\n  Interactable.prototype.checkAndPreventDefault = function (event) {\n    return checkAndPreventDefault(this, scope, event)\n  }\n\n  // prevent native HTML5 drag on interact.js target elements\n  scope.interactions.docEvents.push({\n    type: 'dragstart',\n    listener(event) {\n      for (const interaction of scope.interactions.list) {\n        if (\n          interaction.element &&\n          (interaction.element === event.target || nodeContains(interaction.element, event.target))\n        ) {\n          interaction.interactable.checkAndPreventDefault(event)\n          return\n        }\n      }\n    },\n  })\n}\n\nexport default {\n  id: 'core/interactablePreventDefault',\n  install,\n  listeners: ['down', 'move', 'up', 'cancel'].reduce((acc, eventType) => {\n    acc[`interactions:${eventType}`] = onInteractionEvent\n    return acc\n  }, {} as any),\n}\n"],"names":["preventDefault","test","options","newValue","is","bool","this","checkAndPreventDefault","interactable","scope","event","setting","events","supportsPassive","type","target","document","doc","getDocOptions","docOptions","passive","element","matchesSelector","onInteractionEvent","_ref","interaction","install","Interactable","prototype","interactions","docEvents","push","listener","list","nodeContains","interactablePreventDefault","id","reduce","acc","eventType"],"mappings":";;wLA8BA,MAAMA,wBAAiBC,KAAuBD,SACjBE,QAAAF,eAAKG,EACzBD,MAEPE,GAAAC,KAAAF,SAEOE,QAAKF,eAAWA,EAAA,SAAA,QAChBD,MAEPI,KAAAJ,QAAAF,cAEA,EACF,SAAmCO,uBAAAC,EAAAC,EAAAC,GAEnC,MAAAC,IAA+BJ,QAACC,eAC9B,GAAgBA,UAAhBG,EAEA,GAAgB,WAAZA,EAAJ,CAWA,GAAAF,EAAAG,OAAAC,iBAAA,sBAAAZ,KAAAS,EAAAI,MAAA,CACIL,MAAAA,EAAMG,UAAsBF,EAAAK,QAAyBC,SACjDC,EAAeR,EAAMS,cAASF,GACpC,IAAMG,IAAaV,EAAmBG,SAAK,IAADO,EAACP,OAAAQ,cAI3C,CAGF,uCAAAnB,KAAAS,EAAAI,OAKAV,GAAAiB,QAAAX,EAAAK,SAAAO,gBAAAZ,EAAAK,OAAA,0EAMAL,EAAAV,gBA5BE,MAFEW,EAAAA,iBAiCN,SAAAY,mBAAAC,GAESD,IAAAA,YAAmBE,EAAAf,MAAEe,GAAaf,EAA8Dc,EAAAhB,cACnGiB,EAAAA,aAAYjB,uBAAcE,EAE9B,CACF,SAAAgB,QAAAjB,GAEgBiB,MAAAA,aACRC,GAAEA,EAAcA,EAAQC,UAAA5B,eAAAA,eAE9B2B,EAAaC,UAAU5B,gCAA+BU,GAEtDiB,OAAAA,8BAA6CjB,EAC3C,EAGFD,EAAAoB,aAAAC,UAAAC,KAAA,MACMF,YACJf,QAAAA,CAAiBJ,GACjBsB,IAAAA,MAAStB,KAAOD,EAAAoB,aAAAI,KACd,KAAsBZ,YAAUQ,UAAmBnB,EAAAK,QAAAmB,aAAAT,EAAAJ,QAAAX,EAAAK,SAK/CU,YAJFA,EACajB,aAAQD,uBACMG,EAK7B,GAEJ,CACF,IAAAyB,2BAAA,CAEeC,GAAA,kCACbA,gBACAV,UAAO,CAAA,OAAA,OAAA,KAAA,UAAAW,QAAA,CAAAC,EAAAC,uBACaA,GAAsBhB,mBACpBgB,IACpB,CAAA,WAEHJ,sCAAAT"}