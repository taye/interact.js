{"version":3,"file":"Interactable.js","sources":["Interactable.ts"],"sourcesContent":["/* eslint-disable no-dupe-class-members */\nimport * as arr from '@interactjs/utils/arr'\nimport browser from '@interactjs/utils/browser'\nimport clone from '@interactjs/utils/clone'\nimport { getElementRect, matchesUpTo, nodeContains, trySelector } from '@interactjs/utils/domUtils'\nimport extend from '@interactjs/utils/extend'\nimport is from '@interactjs/utils/is'\nimport isNonNativeEvent from '@interactjs/utils/isNonNativeEvent'\nimport normalizeListeners from '@interactjs/utils/normalizeListeners'\nimport { getWindow } from '@interactjs/utils/window'\n\nimport type { Scope } from '@interactjs/core/scope'\nimport type {\n  ActionMap,\n  ActionMethod,\n  ActionName,\n  Actions,\n  Context,\n  Element,\n  EventTypes,\n  Listeners,\n  ListenersArg,\n  OrBoolean,\n  Target,\n} from '@interactjs/core/types'\n\nimport { Eventable } from './Eventable'\nimport type { ActionDefaults, Defaults, OptionsArg, PerActionDefaults, Options } from './options'\n\ntype IgnoreValue = string | Element | boolean\ntype DeltaSource = 'page' | 'client'\n\nconst enum OnOffMethod {\n  On,\n  Off,\n}\n\n/**\n * ```ts\n * const interactable = interact('.cards')\n *   .draggable({\n *     listeners: { move: event => console.log(event.type, event.pageX, event.pageY) }\n *   })\n *   .resizable({\n *     listeners: { move: event => console.log(event.rect) },\n *     modifiers: [interact.modifiers.restrictEdges({ outer: 'parent' })]\n *   })\n * ```\n */\nexport class Interactable implements Partial<Eventable> {\n  /** @internal */ get _defaults(): Defaults {\n    return {\n      base: {},\n      perAction: {},\n      actions: {} as ActionDefaults,\n    }\n  }\n\n  readonly target: Target\n  /** @internal */ readonly options!: Required<Options>\n  /** @internal */ readonly _actions: Actions\n  /** @internal */ readonly events = new Eventable()\n  /** @internal */ readonly _context: Context\n  /** @internal */ readonly _win: Window\n  /** @internal */ readonly _doc: Document\n  /** @internal */ readonly _scopeEvents: Scope['events']\n\n  constructor(\n    target: Target,\n    options: any,\n    defaultContext: Document | Element,\n    scopeEvents: Scope['events'],\n  ) {\n    this._actions = options.actions\n    this.target = target\n    this._context = options.context || defaultContext\n    this._win = getWindow(trySelector(target) ? this._context : target)\n    this._doc = this._win.document\n    this._scopeEvents = scopeEvents\n\n    this.set(options)\n  }\n\n  setOnEvents(actionName: ActionName, phases: NonNullable<any>) {\n    if (is.func(phases.onstart)) {\n      this.on(`${actionName}start`, phases.onstart)\n    }\n    if (is.func(phases.onmove)) {\n      this.on(`${actionName}move`, phases.onmove)\n    }\n    if (is.func(phases.onend)) {\n      this.on(`${actionName}end`, phases.onend)\n    }\n    if (is.func(phases.oninertiastart)) {\n      this.on(`${actionName}inertiastart`, phases.oninertiastart)\n    }\n\n    return this\n  }\n\n  updatePerActionListeners(actionName: ActionName, prev: Listeners | undefined, cur: Listeners | undefined) {\n    const actionFilter = (this._actions.map[actionName] as { filterEventType?: (type: string) => boolean })\n      ?.filterEventType\n    const filter = (type: string) =>\n      (actionFilter == null || actionFilter(type)) && isNonNativeEvent(type, this._actions)\n\n    if (is.array(prev) || is.object(prev)) {\n      this._onOff(OnOffMethod.Off, actionName, prev, undefined, filter)\n    }\n\n    if (is.array(cur) || is.object(cur)) {\n      this._onOff(OnOffMethod.On, actionName, cur, undefined, filter)\n    }\n  }\n\n  setPerAction(actionName: ActionName, options: OrBoolean<Options>) {\n    const defaults = this._defaults\n\n    // for all the default per-action options\n    for (const optionName_ in options) {\n      const optionName = optionName_ as keyof PerActionDefaults\n      const actionOptions = this.options[actionName]\n      const optionValue: any = options[optionName]\n\n      // remove old event listeners and add new ones\n      if (optionName === 'listeners') {\n        this.updatePerActionListeners(actionName, actionOptions.listeners, optionValue as Listeners)\n      }\n\n      // if the option value is an array\n      if (is.array(optionValue)) {\n        ;(actionOptions[optionName] as any) = arr.from(optionValue)\n      }\n      // if the option value is an object\n      else if (is.plainObject(optionValue)) {\n        // copy the object\n        ;(actionOptions[optionName] as any) = extend(\n          actionOptions[optionName] || ({} as any),\n          clone(optionValue),\n        )\n\n        // set anabled field to true if it exists in the defaults\n        if (\n          is.object(defaults.perAction[optionName]) &&\n          'enabled' in (defaults.perAction[optionName] as any)\n        ) {\n          ;(actionOptions[optionName] as any).enabled = optionValue.enabled !== false\n        }\n      }\n      // if the option value is a boolean and the default is an object\n      else if (is.bool(optionValue) && is.object(defaults.perAction[optionName])) {\n        ;(actionOptions[optionName] as any).enabled = optionValue\n      }\n      // if it's anything else, do a plain assignment\n      else {\n        ;(actionOptions[optionName] as any) = optionValue\n      }\n    }\n  }\n\n  /**\n   * The default function to get an Interactables bounding rect. Can be\n   * overridden using {@link Interactable.rectChecker}.\n   *\n   * @param {Element} [element] The element to measure.\n   * @return {Rect} The object's bounding rectangle.\n   */\n  getRect(element: Element) {\n    element = element || (is.element(this.target) ? this.target : null)\n\n    if (is.string(this.target)) {\n      element = element || this._context.querySelector(this.target)\n    }\n\n    return getElementRect(element)\n  }\n\n  /**\n   * Returns or sets the function used to calculate the interactable's\n   * element's rectangle\n   *\n   * @param {function} [checker] A function which returns this Interactable's\n   * bounding rectangle. See {@link Interactable.getRect}\n   * @return {function | object} The checker function or this Interactable\n   */\n  rectChecker(): (element: Element) => any | null\n  rectChecker(checker: (element: Element) => any): this\n  rectChecker(checker?: (element: Element) => any) {\n    if (is.func(checker)) {\n      this.getRect = (element) => {\n        const rect = extend({}, checker.apply(this, element))\n\n        if (!(('width' in rect) as unknown)) {\n          rect.width = rect.right - rect.left\n          rect.height = rect.bottom - rect.top\n        }\n\n        return rect\n      }\n\n      return this\n    }\n\n    if (checker === null) {\n      delete (this as Partial<typeof this>).getRect\n\n      return this\n    }\n\n    return this.getRect\n  }\n\n  /** @internal */\n  _backCompatOption(optionName: keyof Options, newValue: any) {\n    if (trySelector(newValue) || is.object(newValue)) {\n      ;(this.options[optionName] as any) = newValue\n\n      for (const action in this._actions.map) {\n        ;(this.options[action as keyof ActionMap] as any)[optionName] = newValue\n      }\n\n      return this\n    }\n\n    return this.options[optionName]\n  }\n\n  /**\n   * Gets or sets the origin of the Interactable's element.  The x and y\n   * of the origin will be subtracted from action event coordinates.\n   *\n   * @param {Element | object | string} [origin] An HTML or SVG Element whose\n   * rect will be used, an object eg. { x: 0, y: 0 } or string 'parent', 'self'\n   * or any CSS selector\n   *\n   * @return {object} The current origin or this Interactable\n   */\n  origin(newValue: any) {\n    return this._backCompatOption('origin', newValue)\n  }\n\n  /**\n   * Returns or sets the mouse coordinate types used to calculate the\n   * movement of the pointer.\n   *\n   * @param {string} [newValue] Use 'client' if you will be scrolling while\n   * interacting; Use 'page' if you want autoScroll to work\n   * @return {string | object} The current deltaSource or this Interactable\n   */\n  deltaSource(): DeltaSource\n  deltaSource(newValue: DeltaSource): this\n  deltaSource(newValue?: DeltaSource) {\n    if (newValue === 'page' || newValue === 'client') {\n      this.options.deltaSource = newValue\n\n      return this\n    }\n\n    return this.options.deltaSource\n  }\n\n  /** @internal */\n  getAllElements(): Element[] {\n    const { target } = this\n\n    if (is.string(target)) {\n      return Array.from(this._context.querySelectorAll(target))\n    }\n\n    if (is.func(target) && (target as any).getAllElements) {\n      return (target as any).getAllElements()\n    }\n\n    return is.element(target) ? [target] : []\n  }\n\n  /**\n   * Gets the selector context Node of the Interactable. The default is\n   * `window.document`.\n   *\n   * @return {Node} The context Node of this Interactable\n   */\n  context() {\n    return this._context\n  }\n\n  inContext(element: Document | Node) {\n    return this._context === element.ownerDocument || nodeContains(this._context, element)\n  }\n\n  /** @internal */\n  testIgnoreAllow(\n    this: Interactable,\n    options: { ignoreFrom?: IgnoreValue; allowFrom?: IgnoreValue },\n    targetNode: Node,\n    eventTarget: Node,\n  ) {\n    return (\n      !this.testIgnore(options.ignoreFrom, targetNode, eventTarget) &&\n      this.testAllow(options.allowFrom, targetNode, eventTarget)\n    )\n  }\n\n  /** @internal */\n  testAllow(this: Interactable, allowFrom: IgnoreValue | undefined, targetNode: Node, element: Node) {\n    if (!allowFrom) {\n      return true\n    }\n\n    if (!is.element(element)) {\n      return false\n    }\n\n    if (is.string(allowFrom)) {\n      return matchesUpTo(element, allowFrom, targetNode)\n    } else if (is.element(allowFrom)) {\n      return nodeContains(allowFrom, element)\n    }\n\n    return false\n  }\n\n  /** @internal */\n  testIgnore(this: Interactable, ignoreFrom: IgnoreValue | undefined, targetNode: Node, element: Node) {\n    if (!ignoreFrom || !is.element(element)) {\n      return false\n    }\n\n    if (is.string(ignoreFrom)) {\n      return matchesUpTo(element, ignoreFrom, targetNode)\n    } else if (is.element(ignoreFrom)) {\n      return nodeContains(ignoreFrom, element)\n    }\n\n    return false\n  }\n\n  /**\n   * Calls listeners for the given InteractEvent type bound globally\n   * and directly to this Interactable\n   *\n   * @param {InteractEvent} iEvent The InteractEvent object to be fired on this\n   * Interactable\n   * @return {Interactable} this Interactable\n   */\n  fire<E extends { type: string }>(iEvent: E) {\n    this.events.fire(iEvent)\n\n    return this\n  }\n\n  /** @internal */\n  _onOff(\n    method: OnOffMethod,\n    typeArg: EventTypes,\n    listenerArg?: ListenersArg | null,\n    options?: any,\n    filter?: (type: string) => boolean,\n  ) {\n    if (is.object(typeArg) && !is.array(typeArg)) {\n      options = listenerArg\n      listenerArg = null\n    }\n\n    const listeners = normalizeListeners(typeArg, listenerArg, filter)\n\n    for (let type in listeners) {\n      if (type === 'wheel') {\n        type = browser.wheelEvent\n      }\n\n      for (const listener of listeners[type]) {\n        // if it is an action event type\n        if (isNonNativeEvent(type, this._actions)) {\n          this.events[method === OnOffMethod.On ? 'on' : 'off'](type, listener)\n        }\n        // delegated event\n        else if (is.string(this.target)) {\n          this._scopeEvents[method === OnOffMethod.On ? 'addDelegate' : 'removeDelegate'](\n            this.target,\n            this._context,\n            type,\n            listener,\n            options,\n          )\n        }\n        // remove listener from this Interactable's element\n        else {\n          this._scopeEvents[method === OnOffMethod.On ? 'add' : 'remove'](\n            this.target,\n            type,\n            listener,\n            options,\n          )\n        }\n      }\n    }\n\n    return this\n  }\n\n  /**\n   * Binds a listener for an InteractEvent, pointerEvent or DOM event.\n   *\n   * @param {string | array | object} types The types of events to listen\n   * for\n   * @param {function | array | object} [listener] The event listener function(s)\n   * @param {object | boolean} [options] options object or useCapture flag for\n   * addEventListener\n   * @return {Interactable} This Interactable\n   */\n  on(types: EventTypes, listener?: ListenersArg, options?: any) {\n    return this._onOff(OnOffMethod.On, types, listener, options)\n  }\n\n  /**\n   * Removes an InteractEvent, pointerEvent or DOM event listener.\n   *\n   * @param {string | array | object} types The types of events that were\n   * listened for\n   * @param {function | array | object} [listener] The event listener function(s)\n   * @param {object | boolean} [options] options object or useCapture flag for\n   * removeEventListener\n   * @return {Interactable} This Interactable\n   */\n  off(types: string | string[] | EventTypes, listener?: ListenersArg, options?: any) {\n    return this._onOff(OnOffMethod.Off, types, listener, options)\n  }\n\n  /**\n   * Reset the options of this Interactable\n   *\n   * @param {object} options The new settings to apply\n   * @return {object} This Interactable\n   */\n  set(options: OptionsArg) {\n    const defaults = this._defaults\n\n    if (!is.object(options)) {\n      options = {}\n    }\n\n    ;(this.options as Required<Options>) = clone(defaults.base) as Required<Options>\n\n    for (const actionName_ in this._actions.methodDict) {\n      const actionName = actionName_ as ActionName\n      const methodName = this._actions.methodDict[actionName]\n\n      this.options[actionName] = {}\n      this.setPerAction(actionName, extend(extend({}, defaults.perAction), defaults.actions[actionName]))\n      ;(this[methodName] as ActionMethod<unknown>)(options[actionName])\n    }\n\n    for (const setting in options) {\n      if (setting === 'getRect') {\n        this.rectChecker(options.getRect)\n        continue\n      }\n\n      if (is.func((this as any)[setting])) {\n        ;(this as any)[setting](options[setting as keyof typeof options])\n      }\n    }\n\n    return this\n  }\n\n  /**\n   * Remove this interactable from the list of interactables and remove it's\n   * action capabilities and event listeners\n   */\n  unset() {\n    if (is.string(this.target)) {\n      // remove delegated events\n      for (const type in this._scopeEvents.delegatedEvents) {\n        const delegated = this._scopeEvents.delegatedEvents[type]\n\n        for (let i = delegated.length - 1; i >= 0; i--) {\n          const { selector, context, listeners } = delegated[i]\n\n          if (selector === this.target && context === this._context) {\n            delegated.splice(i, 1)\n          }\n\n          for (let l = listeners.length - 1; l >= 0; l--) {\n            this._scopeEvents.removeDelegate(\n              this.target,\n              this._context,\n              type,\n              listeners[l][0],\n              listeners[l][1],\n            )\n          }\n        }\n      }\n    } else {\n      this._scopeEvents.remove(this.target, 'all')\n    }\n  }\n}\n"],"names":["OnOffMethod","Interactable","_defaults","base","perAction","actions","target","options","_actions","events","Eventable","_context","_win","_doc","_scopeEvents","constructor","defaultContext","scopeEvents","context","getWindow","trySelector","document","set","setOnEvents","actionName","phases","is","func","onstart","on","onmove","onend","oninertiastart","updatePerActionListeners","prev","cur","_this$_actions$map$ac","actionFilter","map","filterEventType","filter","type","isNonNativeEvent","array","object","_onOff","Off","undefined","On","setPerAction","defaults","optionName_","optionName","actionOptions","optionValue","listeners","arr","from","plainObject","extend","clone","enabled","bool","getRect","element","string","querySelector","getElementRect","rectChecker","checker","rect","apply","width","right","left","height","bottom","top","_backCompatOption","newValue","action","origin","deltaSource","getAllElements","Array","querySelectorAll","inContext","ownerDocument","nodeContains","testIgnoreAllow","targetNode","eventTarget","testIgnore","ignoreFrom","testAllow","allowFrom","matchesUpTo","fire","iEvent","method","typeArg","listenerArg","normalizeListeners","browser","wheelEvent","listener","types","off","actionName_","methodDict","methodName","setting","unset","delegatedEvents","delegated","i","length","selector","splice","l","removeDelegate","remove"],"mappings":"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"}