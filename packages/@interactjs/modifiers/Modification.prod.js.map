{"version":3,"file":"Modification.prod.js","sources":["Modification.ts"],"sourcesContent":["import type { EventPhase } from '@interactjs/core/InteractEvent'\nimport type { Interaction, DoAnyPhaseArg } from '@interactjs/core/Interaction'\nimport type { EdgeOptions, FullRect, Point, Rect } from '@interactjs/core/types'\nimport clone from '@interactjs/utils/clone'\nimport extend from '@interactjs/utils/extend'\nimport * as rectUtils from '@interactjs/utils/rect'\n\nimport type { Modifier, ModifierArg, ModifierState } from './types'\n\nexport interface ModificationResult {\n  delta: Point\n  rectDelta: Rect\n  coords: Point\n  rect: FullRect\n  eventProps: any[]\n  changed: boolean\n}\n\ninterface MethodArg {\n  phase: EventPhase\n  pageCoords: Point\n  rect: FullRect\n  coords: Point\n  preEnd?: boolean\n  skipModifiers?: number\n}\n\nexport class Modification {\n  states: ModifierState[] = []\n  startOffset: Rect = { left: 0, right: 0, top: 0, bottom: 0 }\n  startDelta!: Point\n  result!: ModificationResult\n  endResult!: Point\n  startEdges!: EdgeOptions\n  edges: EdgeOptions\n  readonly interaction: Readonly<Interaction>\n\n  constructor(interaction: Interaction) {\n    this.interaction = interaction\n    this.result = createResult()\n    this.edges = {\n      left: false,\n      right: false,\n      top: false,\n      bottom: false,\n    }\n  }\n\n  start({ phase }: { phase: EventPhase }, pageCoords: Point) {\n    const { interaction } = this\n    const modifierList = getModifierList(interaction)\n    this.prepareStates(modifierList)\n\n    this.startEdges = extend({}, interaction.edges)\n    this.edges = extend({}, this.startEdges)\n    this.startOffset = getRectOffset(interaction.rect, pageCoords)\n    this.startDelta = { x: 0, y: 0 }\n\n    const arg = this.fillArg({\n      phase,\n      pageCoords,\n      preEnd: false,\n    })\n\n    this.result = createResult()\n    this.startAll(arg)\n\n    const result = (this.result = this.setAll(arg))\n\n    return result\n  }\n\n  fillArg(arg: Partial<ModifierArg>) {\n    const { interaction } = this\n\n    arg.interaction = interaction\n    arg.interactable = interaction.interactable\n    arg.element = interaction.element\n    arg.rect ||= interaction.rect\n    arg.edges ||= this.startEdges\n    arg.startOffset = this.startOffset\n\n    return arg as ModifierArg\n  }\n\n  startAll(arg: MethodArg & Partial<ModifierArg>) {\n    for (const state of this.states) {\n      if (state.methods.start) {\n        arg.state = state\n        state.methods.start(arg as ModifierArg)\n      }\n    }\n  }\n\n  setAll(arg: MethodArg & Partial<ModifierArg>): ModificationResult {\n    const { phase, preEnd, skipModifiers, rect: unmodifiedRect, edges: unmodifiedEdges } = arg\n\n    arg.coords = extend({}, arg.pageCoords)\n    arg.rect = extend({}, unmodifiedRect)\n    arg.edges = extend({}, unmodifiedEdges)\n\n    const states = skipModifiers ? this.states.slice(skipModifiers) : this.states\n\n    const newResult = createResult(arg.coords, arg.rect)\n\n    for (const state of states) {\n      const { options } = state\n      const lastModifierCoords = extend({}, arg.coords)\n      let returnValue = null\n\n      if (state.methods?.set && this.shouldDo(options, preEnd, phase)) {\n        arg.state = state\n        returnValue = state.methods.set(arg as ModifierArg<never>)\n\n        rectUtils.addEdges(arg.edges, arg.rect, {\n          x: arg.coords.x - lastModifierCoords.x,\n          y: arg.coords.y - lastModifierCoords.y,\n        })\n      }\n\n      newResult.eventProps.push(returnValue)\n    }\n\n    extend(this.edges, arg.edges)\n\n    newResult.delta.x = arg.coords.x - arg.pageCoords.x\n    newResult.delta.y = arg.coords.y - arg.pageCoords.y\n\n    newResult.rectDelta.left = arg.rect.left - unmodifiedRect.left\n    newResult.rectDelta.right = arg.rect.right - unmodifiedRect.right\n    newResult.rectDelta.top = arg.rect.top - unmodifiedRect.top\n    newResult.rectDelta.bottom = arg.rect.bottom - unmodifiedRect.bottom\n\n    const prevCoords = this.result.coords\n    const prevRect = this.result.rect\n\n    if (prevCoords && prevRect) {\n      const rectChanged =\n        newResult.rect.left !== prevRect.left ||\n        newResult.rect.right !== prevRect.right ||\n        newResult.rect.top !== prevRect.top ||\n        newResult.rect.bottom !== prevRect.bottom\n\n      newResult.changed =\n        rectChanged || prevCoords.x !== newResult.coords.x || prevCoords.y !== newResult.coords.y\n    }\n\n    return newResult\n  }\n\n  applyToInteraction(arg: { phase: EventPhase; rect?: Rect }) {\n    const { interaction } = this\n    const { phase } = arg\n    const curCoords = interaction.coords.cur\n    const startCoords = interaction.coords.start\n    const { result, startDelta } = this\n    const curDelta = result.delta\n\n    if (phase === 'start') {\n      extend(this.startDelta, result.delta)\n    }\n\n    for (const [coordsSet, delta] of [\n      [startCoords, startDelta],\n      [curCoords, curDelta],\n    ] as const) {\n      coordsSet.page.x += delta.x\n      coordsSet.page.y += delta.y\n      coordsSet.client.x += delta.x\n      coordsSet.client.y += delta.y\n    }\n\n    const { rectDelta } = this.result\n    const rect = arg.rect || interaction.rect\n\n    rect.left += rectDelta.left\n    rect.right += rectDelta.right\n    rect.top += rectDelta.top\n    rect.bottom += rectDelta.bottom\n\n    rect.width = rect.right - rect.left\n    rect.height = rect.bottom - rect.top\n  }\n\n  setAndApply(\n    arg: Partial<DoAnyPhaseArg> & {\n      phase: EventPhase\n      preEnd?: boolean\n      skipModifiers?: number\n      modifiedCoords?: Point\n    },\n  ): void | false {\n    const { interaction } = this\n    const { phase, preEnd, skipModifiers } = arg\n\n    const result = this.setAll(\n      this.fillArg({\n        preEnd,\n        phase,\n        pageCoords: arg.modifiedCoords || interaction.coords.cur.page,\n      }),\n    )\n\n    this.result = result\n\n    // don't fire an action move if a modifier would keep the event in the same\n    // cordinates as before\n    if (\n      !result.changed &&\n      (!skipModifiers || skipModifiers < this.states.length) &&\n      interaction.interacting()\n    ) {\n      return false\n    }\n\n    if (arg.modifiedCoords) {\n      const { page } = interaction.coords.cur\n      const adjustment = {\n        x: arg.modifiedCoords.x - page.x,\n        y: arg.modifiedCoords.y - page.y,\n      }\n\n      result.coords.x += adjustment.x\n      result.coords.y += adjustment.y\n      result.delta.x += adjustment.x\n      result.delta.y += adjustment.y\n    }\n\n    this.applyToInteraction(arg)\n  }\n\n  beforeEnd(arg: Omit<DoAnyPhaseArg, 'iEvent'> & { state?: ModifierState }): void | false {\n    const { interaction, event } = arg\n    const states = this.states\n\n    if (!states || !states.length) {\n      return\n    }\n\n    let doPreend = false\n\n    for (const state of states) {\n      arg.state = state\n      const { options, methods } = state\n\n      const endPosition = methods.beforeEnd && methods.beforeEnd(arg as unknown as ModifierArg)\n\n      if (endPosition) {\n        this.endResult = endPosition\n        return false\n      }\n\n      doPreend = doPreend || (!doPreend && this.shouldDo(options, true, arg.phase, true))\n    }\n\n    if (doPreend) {\n      // trigger a final modified move before ending\n      interaction.move({ event, preEnd: true })\n    }\n  }\n\n  stop(arg: { interaction: Interaction }) {\n    const { interaction } = arg\n\n    if (!this.states || !this.states.length) {\n      return\n    }\n\n    const modifierArg: Partial<ModifierArg> = extend(\n      {\n        states: this.states,\n        interactable: interaction.interactable,\n        element: interaction.element,\n        rect: null,\n      },\n      arg,\n    )\n\n    this.fillArg(modifierArg)\n\n    for (const state of this.states) {\n      modifierArg.state = state\n\n      if (state.methods.stop) {\n        state.methods.stop(modifierArg as ModifierArg)\n      }\n    }\n\n    this.states = null\n    this.endResult = null\n  }\n\n  prepareStates(modifierList: Modifier[]) {\n    this.states = []\n\n    for (let index = 0; index < modifierList.length; index++) {\n      const { options, methods, name } = modifierList[index]\n\n      this.states.push({\n        options,\n        methods,\n        index,\n        name,\n      })\n    }\n\n    return this.states\n  }\n\n  restoreInteractionCoords({ interaction: { coords, rect, modification } }: { interaction: Interaction }) {\n    if (!modification.result) return\n\n    const { startDelta } = modification\n    const { delta: curDelta, rectDelta } = modification.result\n\n    const coordsAndDeltas = [\n      [coords.start, startDelta],\n      [coords.cur, curDelta],\n    ]\n\n    for (const [coordsSet, delta] of coordsAndDeltas as any) {\n      coordsSet.page.x -= delta.x\n      coordsSet.page.y -= delta.y\n      coordsSet.client.x -= delta.x\n      coordsSet.client.y -= delta.y\n    }\n\n    rect.left -= rectDelta.left\n    rect.right -= rectDelta.right\n    rect.top -= rectDelta.top\n    rect.bottom -= rectDelta.bottom\n  }\n\n  shouldDo(options, preEnd?: boolean, phase?: string, requireEndOnly?: boolean) {\n    if (\n      // ignore disabled modifiers\n      !options ||\n      options.enabled === false ||\n      // check if we require endOnly option to fire move before end\n      (requireEndOnly && !options.endOnly) ||\n      // don't apply endOnly modifiers when not ending\n      (options.endOnly && !preEnd) ||\n      // check if modifier should run be applied on start\n      (phase === 'start' && !options.setStart)\n    ) {\n      return false\n    }\n\n    return true\n  }\n\n  copyFrom(other: Modification) {\n    this.startOffset = other.startOffset\n    this.startDelta = other.startDelta\n    this.startEdges = other.startEdges\n    this.edges = other.edges\n    this.states = other.states.map((s) => clone(s) as ModifierState)\n    this.result = createResult(extend({}, other.result.coords), extend({}, other.result.rect))\n  }\n\n  destroy() {\n    for (const prop in this) {\n      this[prop] = null\n    }\n  }\n}\n\nfunction createResult(coords?: Point, rect?: FullRect): ModificationResult {\n  return {\n    rect,\n    coords,\n    delta: { x: 0, y: 0 },\n    rectDelta: {\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0,\n    },\n    eventProps: [],\n    changed: true,\n  }\n}\n\nfunction getModifierList(interaction) {\n  const actionOptions = interaction.interactable.options[interaction.prepared.name]\n  const actionModifiers = actionOptions.modifiers\n\n  if (actionModifiers && actionModifiers.length) {\n    return actionModifiers\n  }\n\n  return ['snap', 'snapSize', 'snapEdges', 'restrict', 'restrictEdges', 'restrictSize']\n    .map((type) => {\n      const options = actionOptions[type]\n\n      return (\n        options &&\n        options.enabled && {\n          options,\n          methods: options._methods,\n        }\n      )\n    })\n    .filter((m) => !!m)\n}\n\nexport function getRectOffset(rect, coords) {\n  return rect\n    ? {\n        left: coords.x - rect.left,\n        top: coords.y - rect.top,\n        right: rect.right - coords.x,\n        bottom: rect.bottom - coords.y,\n      }\n    : {\n        left: 0,\n        top: 0,\n        right: 0,\n        bottom: 0,\n      }\n}\n"],"names":["constructor","states","left","right","top","bottom","result","edges","interaction","this","createResult","start","_ref","pageCoords","phase","getModifierList","modifierList","prepareStates","extend","startEdges","getRectOffset","rect","startOffset","x","startDelta","arg","fillArg","setAll","interactable","element","startAll","state","methods","preEnd","skipModifiers","unmodifiedRect","unmodifiedEdges","coords","slice","newResult","_state$methods","options","returnValue","set","shouldDo","rectUtils","addEdges","lastModifierCoords","eventProps","push","delta","y","rectDelta","prevCoords","prevRect","changed","applyToInteraction","cur","curCoords","startCoords","coordsSet","curDelta","page","client","width","setAndApply","modifiedCoords","length","interacting","adjustment","beforeEnd","event","doPreend","endPosition","move","stop","modifierArg","index","name","restoreInteractionCoords","_ref2","modification","requireEndOnly","enabled","endOnly","setStart","copyFrom","other","map","s","clone","destroy","prop","prepared","actionOptions","modifiers","actionModifiers","type","_methods","filter","m","Modification"],"mappings":"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"}