{"version":3,"file":"window.js","sources":["window.ts"],"sourcesContent":["import isWindow from './isWindow'\n\nexport let realWindow = undefined as Window\n\nlet win = undefined as Window\nexport { win as window }\n\nexport function init(window: Window & { wrap?: (...args: any[]) => any }) {\n  // get wrapped window if using Shadow DOM polyfill\n\n  realWindow = window\n\n  // create a TextNode\n  const el = window.document.createTextNode('')\n\n  // check if it's wrapped by a polyfill\n  if (el.ownerDocument !== window.document && typeof window.wrap === 'function' && window.wrap(el) === el) {\n    // use wrapped window\n    window = window.wrap(window)\n  }\n\n  win = window\n}\n\nif (typeof window !== 'undefined' && !!window) {\n  init(window)\n}\n\nexport function getWindow(node: any) {\n  if (isWindow(node)) {\n    return node\n  }\n\n  const rootNode = node.ownerDocument || node\n\n  return rootNode.defaultView || win.window\n}\n"],"names":["realWindow","undefined","win","init","window","el","document","createTextNode","ownerDocument","wrap","getWindow","node","isWindow","rootNode","defaultView"],"mappings":";;;;;;;;;;AAEO,IAAIA,UAAU,GAAGC,UAAmB;AAEvCC,IAAAA,GAAG,GAAGD,UAAmB;AAGtB,SAASE,IAAIA,CAACC,MAAmD,EAAE;AACxE;;AAEAJ,EAAAA,UAAU,GAAGI,MAAM,CAAA;;AAEnB;EACA,MAAMC,EAAE,GAAGD,MAAM,CAACE,QAAQ,CAACC,cAAc,CAAC,EAAE,CAAC,CAAA;;AAE7C;EACA,IAAIF,EAAE,CAACG,aAAa,KAAKJ,MAAM,CAACE,QAAQ,IAAI,OAAOF,MAAM,CAACK,IAAI,KAAK,UAAU,IAAIL,MAAM,CAACK,IAAI,CAACJ,EAAE,CAAC,KAAKA,EAAE,EAAE;AACvG;AACAD,IAAAA,MAAM,GAAGA,MAAM,CAACK,IAAI,CAACL,MAAM,CAAC,CAAA;AAC9B,GAAA;AAEAF,EAAAA,GAAG,GAAGE,MAAM,CAAA;AACd,CAAA;AAEA,IAAI,OAAOA,MAAM,KAAK,WAAW,IAAI,CAAC,CAACA,MAAM,EAAE;EAC7CD,IAAI,CAACC,MAAM,CAAC,CAAA;AACd,CAAA;AAEO,SAASM,SAASA,CAACC,IAAS,EAAE;AACnC,EAAA,IAAIC,QAAQ,CAACD,IAAI,CAAC,EAAE;AAClB,IAAA,OAAOA,IAAI,CAAA;AACb,GAAA;AAEA,EAAA,MAAME,QAAQ,GAAGF,IAAI,CAACH,aAAa,IAAIG,IAAI,CAAA;AAE3C,EAAA,OAAOE,QAAQ,CAACC,WAAW,IAAIZ,GAAG,CAACE,MAAM,CAAA;AAC3C;;;;"}