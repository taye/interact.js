{"version":3,"file":"Interaction.js","sources":["Interaction.ts"],"sourcesContent":["import * as arr from '@interactjs/utils/arr'\nimport extend from '@interactjs/utils/extend'\nimport hypot from '@interactjs/utils/hypot'\nimport { warnOnce, copyAction } from '@interactjs/utils/misc'\nimport * as pointerUtils from '@interactjs/utils/pointerUtils'\nimport * as rectUtils from '@interactjs/utils/rect'\n\nimport type {\n  Element,\n  EdgeOptions,\n  PointerEventType,\n  PointerType,\n  FullRect,\n  CoordsSet,\n  ActionName,\n  ActionProps,\n} from '@interactjs/core/types'\n\nimport type { Interactable } from './Interactable'\nimport type { EventPhase } from './InteractEvent'\nimport { InteractEvent } from './InteractEvent'\nimport type { ActionDefaults } from './options'\nimport { PointerInfo } from './PointerInfo'\nimport type { Scope } from './scope'\n\nexport enum _ProxyValues {\n  interactable = '',\n  element = '',\n  prepared = '',\n  pointerIsDown = '',\n  pointerWasMoved = '',\n  _proxy = '',\n}\n\nexport enum _ProxyMethods {\n  start = '',\n  move = '',\n  end = '',\n  stop = '',\n  interacting = '',\n}\n\nexport type PointerArgProps<T extends {} = {}> = {\n  pointer: PointerType\n  event: PointerEventType\n  eventTarget: Node\n  pointerIndex: number\n  pointerInfo: PointerInfo\n  interaction: Interaction<never>\n} & T\n\nexport interface DoPhaseArg<T extends ActionName, P extends EventPhase> {\n  event: PointerEventType\n  phase: EventPhase\n  interaction: Interaction<T>\n  iEvent: InteractEvent<T, P>\n  preEnd?: boolean\n  type?: string\n}\n\nexport type DoAnyPhaseArg = DoPhaseArg<ActionName, EventPhase>\n\ndeclare module '@interactjs/core/scope' {\n  interface SignalArgs {\n    'interactions:new': { interaction: Interaction<ActionName> }\n    'interactions:down': PointerArgProps<{\n      type: 'down'\n    }>\n    'interactions:move': PointerArgProps<{\n      type: 'move'\n      dx: number\n      dy: number\n      duplicate: boolean\n    }>\n    'interactions:up': PointerArgProps<{\n      type: 'up'\n      curEventTarget: EventTarget\n    }>\n    'interactions:cancel': SignalArgs['interactions:up'] & {\n      type: 'cancel'\n      curEventTarget: EventTarget\n    }\n    'interactions:update-pointer': PointerArgProps<{\n      down: boolean\n    }>\n    'interactions:remove-pointer': PointerArgProps\n    'interactions:blur': { interaction: Interaction<never>; event: Event; type: 'blur' }\n    'interactions:before-action-start': Omit<DoAnyPhaseArg, 'iEvent'>\n    'interactions:action-start': DoAnyPhaseArg\n    'interactions:after-action-start': DoAnyPhaseArg\n    'interactions:before-action-move': Omit<DoAnyPhaseArg, 'iEvent'>\n    'interactions:action-move': DoAnyPhaseArg\n    'interactions:after-action-move': DoAnyPhaseArg\n    'interactions:before-action-end': Omit<DoAnyPhaseArg, 'iEvent'>\n    'interactions:action-end': DoAnyPhaseArg\n    'interactions:after-action-end': DoAnyPhaseArg\n    'interactions:stop': { interaction: Interaction }\n  }\n}\n\nexport type InteractionProxy<T extends ActionName | null = never> = Pick<\n  Interaction<T>,\n  Exclude<keyof typeof _ProxyValues | keyof typeof _ProxyMethods, '_proxy'>\n>\n\nlet idCounter = 0\n\nexport class Interaction<T extends ActionName | null = ActionName> {\n  /** current interactable being interacted with */\n  interactable: Interactable | null = null\n\n  /** the target element of the interactable */\n  element: Element | null = null\n  rect: FullRect | null = null\n  /** @internal */\n  _rects?: {\n    start: FullRect\n    corrected: FullRect\n    previous: FullRect\n    delta: FullRect\n  }\n  /** @internal */\n  edges: EdgeOptions | null = null\n\n  /** @internal */\n  _scopeFire: Scope['fire']\n\n  // action that's ready to be fired on next move event\n  prepared: ActionProps<T> = {\n    name: null,\n    axis: null,\n    edges: null,\n  }\n\n  pointerType: string\n\n  /** @internal keep track of added pointers */\n  pointers: PointerInfo[] = []\n\n  /** @internal pointerdown/mousedown/touchstart event */\n  downEvent: PointerEventType | null = null\n\n  /** @internal */ downPointer: PointerType = {} as PointerType\n\n  /** @internal */\n  _latestPointer: {\n    pointer: PointerType\n    event: PointerEventType\n    eventTarget: Node\n  } = {\n    pointer: null,\n    event: null,\n    eventTarget: null,\n  }\n\n  /** @internal */ prevEvent: InteractEvent<T, EventPhase> = null\n\n  pointerIsDown = false\n  pointerWasMoved = false\n  /** @internal */ _interacting = false\n  /** @internal */ _ending = false\n  /** @internal */ _stopped = true\n  /** @internal */ _proxy: InteractionProxy<T>\n\n  /** @internal */ simulation = null\n\n  /** @internal */ get pointerMoveTolerance() {\n    return 1\n  }\n\n  doMove = warnOnce(function (this: Interaction, signalArg: any) {\n    this.move(signalArg)\n  }, 'The interaction.doMove() method has been renamed to interaction.move()')\n\n  coords: CoordsSet = {\n    // Starting InteractEvent pointer coordinates\n    start: pointerUtils.newCoords(),\n    // Previous native pointer move event coordinates\n    prev: pointerUtils.newCoords(),\n    // current native pointer move event coordinates\n    cur: pointerUtils.newCoords(),\n    // Change in coordinates and time of the pointer\n    delta: pointerUtils.newCoords(),\n    // pointer velocity\n    velocity: pointerUtils.newCoords(),\n  }\n\n  /** @internal */ readonly _id: number = idCounter++\n\n  constructor({ pointerType, scopeFire }: { pointerType?: string; scopeFire: Scope['fire'] }) {\n    this._scopeFire = scopeFire\n    this.pointerType = pointerType\n\n    const that = this\n\n    this._proxy = {} as InteractionProxy<T>\n\n    for (const key in _ProxyValues) {\n      Object.defineProperty(this._proxy, key, {\n        get() {\n          return that[key]\n        },\n      })\n    }\n\n    for (const key in _ProxyMethods) {\n      Object.defineProperty(this._proxy, key, {\n        value: (...args: any[]) => that[key](...args),\n      })\n    }\n\n    this._scopeFire('interactions:new', { interaction: this })\n  }\n\n  pointerDown(pointer: PointerType, event: PointerEventType, eventTarget: Node) {\n    const pointerIndex = this.updatePointer(pointer, event, eventTarget, true)\n    const pointerInfo = this.pointers[pointerIndex]\n\n    this._scopeFire('interactions:down', {\n      pointer,\n      event,\n      eventTarget,\n      pointerIndex,\n      pointerInfo,\n      type: 'down',\n      interaction: this as unknown as Interaction<never>,\n    })\n  }\n\n  /**\n   * ```js\n   * interact(target)\n   *   .draggable({\n   *     // disable the default drag start by down->move\n   *     manualStart: true\n   *   })\n   *   // start dragging after the user holds the pointer down\n   *   .on('hold', function (event) {\n   *     var interaction = event.interaction\n   *\n   *     if (!interaction.interacting()) {\n   *       interaction.start({ name: 'drag' },\n   *                         event.interactable,\n   *                         event.currentTarget)\n   *     }\n   * })\n   * ```\n   *\n   * Start an action with the given Interactable and Element as tartgets. The\n   * action must be enabled for the target Interactable and an appropriate\n   * number of pointers must be held down - 1 for drag/resize, 2 for gesture.\n   *\n   * Use it with `interactable.<action>able({ manualStart: false })` to always\n   * [start actions manually](https://github.com/taye/interact.js/issues/114)\n   *\n   * @param action - The action to be performed - drag, resize, etc.\n   * @param target - The Interactable to target\n   * @param element - The DOM Element to target\n   * @returns Whether the interaction was successfully started\n   */\n  start<A extends ActionName>(action: ActionProps<A>, interactable: Interactable, element: Element): boolean {\n    if (\n      this.interacting() ||\n      !this.pointerIsDown ||\n      this.pointers.length < (action.name === 'gesture' ? 2 : 1) ||\n      !interactable.options[action.name as keyof ActionDefaults].enabled\n    ) {\n      return false\n    }\n\n    copyAction(this.prepared, action)\n\n    this.interactable = interactable\n    this.element = element\n    this.rect = interactable.getRect(element)\n    this.edges = this.prepared.edges\n      ? extend({}, this.prepared.edges)\n      : { left: true, right: true, top: true, bottom: true }\n    this._stopped = false\n    this._interacting =\n      this._doPhase({\n        interaction: this,\n        event: this.downEvent,\n        phase: 'start',\n      }) && !this._stopped\n\n    return this._interacting\n  }\n\n  pointerMove(pointer: PointerType, event: PointerEventType, eventTarget: Node) {\n    if (!this.simulation && !(this.modification && this.modification.endResult)) {\n      this.updatePointer(pointer, event, eventTarget, false)\n    }\n\n    const duplicateMove =\n      this.coords.cur.page.x === this.coords.prev.page.x &&\n      this.coords.cur.page.y === this.coords.prev.page.y &&\n      this.coords.cur.client.x === this.coords.prev.client.x &&\n      this.coords.cur.client.y === this.coords.prev.client.y\n\n    let dx: number\n    let dy: number\n\n    // register movement greater than pointerMoveTolerance\n    if (this.pointerIsDown && !this.pointerWasMoved) {\n      dx = this.coords.cur.client.x - this.coords.start.client.x\n      dy = this.coords.cur.client.y - this.coords.start.client.y\n\n      this.pointerWasMoved = hypot(dx, dy) > this.pointerMoveTolerance\n    }\n\n    const pointerIndex = this.getPointerIndex(pointer)\n    const signalArg = {\n      pointer,\n      pointerIndex,\n      pointerInfo: this.pointers[pointerIndex],\n      event,\n      type: 'move' as const,\n      eventTarget,\n      dx,\n      dy,\n      duplicate: duplicateMove,\n      interaction: this as unknown as Interaction<never>,\n    }\n\n    if (!duplicateMove) {\n      // set pointer coordinate, time changes and velocity\n      pointerUtils.setCoordVelocity(this.coords.velocity, this.coords.delta)\n    }\n\n    this._scopeFire('interactions:move', signalArg)\n\n    if (!duplicateMove && !this.simulation) {\n      // if interacting, fire an 'action-move' signal etc\n      if (this.interacting()) {\n        signalArg.type = null\n        this.move(signalArg)\n      }\n\n      if (this.pointerWasMoved) {\n        pointerUtils.copyCoords(this.coords.prev, this.coords.cur)\n      }\n    }\n  }\n\n  /**\n   * ```js\n   * interact(target)\n   *   .draggable(true)\n   *   .on('dragmove', function (event) {\n   *     if (someCondition) {\n   *       // change the snap settings\n   *       event.interactable.draggable({ snap: { targets: [] }})\n   *       // fire another move event with re-calculated snap\n   *       event.interaction.move()\n   *     }\n   *   })\n   * ```\n   *\n   * Force a move of the current action at the same coordinates. Useful if\n   * snap/restrict has been changed and you want a movement with the new\n   * settings.\n   */\n  move(signalArg?: any) {\n    if (!signalArg || !signalArg.event) {\n      pointerUtils.setZeroCoords(this.coords.delta)\n    }\n\n    signalArg = extend(\n      {\n        pointer: this._latestPointer.pointer,\n        event: this._latestPointer.event,\n        eventTarget: this._latestPointer.eventTarget,\n        interaction: this,\n      },\n      signalArg || {},\n    )\n\n    signalArg.phase = 'move'\n\n    this._doPhase(signalArg)\n  }\n\n  /**\n   * @internal\n   * End interact move events and stop auto-scroll unless simulation is running\n   */\n  pointerUp(pointer: PointerType, event: PointerEventType, eventTarget: Node, curEventTarget: EventTarget) {\n    let pointerIndex = this.getPointerIndex(pointer)\n\n    if (pointerIndex === -1) {\n      pointerIndex = this.updatePointer(pointer, event, eventTarget, false)\n    }\n\n    const type = /cancel$/i.test(event.type) ? 'cancel' : 'up'\n\n    this._scopeFire(`interactions:${type}` as 'interactions:up' | 'interactions:cancel', {\n      pointer,\n      pointerIndex,\n      pointerInfo: this.pointers[pointerIndex],\n      event,\n      eventTarget,\n      type: type as any,\n      curEventTarget,\n      interaction: this as unknown as Interaction<never>,\n    })\n\n    if (!this.simulation) {\n      this.end(event)\n    }\n\n    this.removePointer(pointer, event)\n  }\n\n  /** @internal */\n  documentBlur(event: Event) {\n    this.end(event as any)\n    this._scopeFire('interactions:blur', {\n      event,\n      type: 'blur',\n      interaction: this as unknown as Interaction<never>,\n    })\n  }\n\n  /**\n   * ```js\n   * interact(target)\n   *   .draggable(true)\n   *   .on('move', function (event) {\n   *     if (event.pageX > 1000) {\n   *       // end the current action\n   *       event.interaction.end()\n   *       // stop all further listeners from being called\n   *       event.stopImmediatePropagation()\n   *     }\n   *   })\n   * ```\n   */\n  end(event?: PointerEventType) {\n    this._ending = true\n    event = event || this._latestPointer.event\n    let endPhaseResult: boolean\n\n    if (this.interacting()) {\n      endPhaseResult = this._doPhase({\n        event,\n        interaction: this,\n        phase: 'end',\n      })\n    }\n\n    this._ending = false\n\n    if (endPhaseResult === true) {\n      this.stop()\n    }\n  }\n\n  currentAction() {\n    return this._interacting ? this.prepared.name : null\n  }\n\n  interacting() {\n    return this._interacting\n  }\n\n  stop() {\n    this._scopeFire('interactions:stop', { interaction: this })\n\n    this.interactable = this.element = null\n\n    this._interacting = false\n    this._stopped = true\n    this.prepared.name = this.prevEvent = null\n  }\n\n  /** @internal */\n  getPointerIndex(pointer: any) {\n    const pointerId = pointerUtils.getPointerId(pointer)\n\n    // mouse and pen interactions may have only one pointer\n    return this.pointerType === 'mouse' || this.pointerType === 'pen'\n      ? this.pointers.length - 1\n      : arr.findIndex(this.pointers, (curPointer) => curPointer.id === pointerId)\n  }\n\n  /** @internal */\n  getPointerInfo(pointer: any) {\n    return this.pointers[this.getPointerIndex(pointer)]\n  }\n\n  /** @internal */\n  updatePointer(pointer: PointerType, event: PointerEventType, eventTarget: Node, down?: boolean) {\n    const id = pointerUtils.getPointerId(pointer)\n    let pointerIndex = this.getPointerIndex(pointer)\n    let pointerInfo = this.pointers[pointerIndex]\n\n    down = down === false ? false : down || /(down|start)$/i.test(event.type)\n\n    if (!pointerInfo) {\n      pointerInfo = new PointerInfo(id, pointer, event, null, null)\n\n      pointerIndex = this.pointers.length\n      this.pointers.push(pointerInfo)\n    } else {\n      pointerInfo.pointer = pointer\n    }\n\n    pointerUtils.setCoords(\n      this.coords.cur,\n      this.pointers.map((p) => p.pointer),\n      this._now(),\n    )\n    pointerUtils.setCoordDeltas(this.coords.delta, this.coords.prev, this.coords.cur)\n\n    if (down) {\n      this.pointerIsDown = true\n\n      pointerInfo.downTime = this.coords.cur.timeStamp\n      pointerInfo.downTarget = eventTarget\n      pointerUtils.pointerExtend(this.downPointer, pointer)\n\n      if (!this.interacting()) {\n        pointerUtils.copyCoords(this.coords.start, this.coords.cur)\n        pointerUtils.copyCoords(this.coords.prev, this.coords.cur)\n\n        this.downEvent = event\n        this.pointerWasMoved = false\n      }\n    }\n\n    this._updateLatestPointer(pointer, event, eventTarget)\n\n    this._scopeFire('interactions:update-pointer', {\n      pointer,\n      event,\n      eventTarget,\n      down,\n      pointerInfo,\n      pointerIndex,\n      interaction: this as unknown as Interaction<never>,\n    })\n\n    return pointerIndex\n  }\n\n  /** @internal */\n  removePointer(pointer: PointerType, event: PointerEventType) {\n    const pointerIndex = this.getPointerIndex(pointer)\n\n    if (pointerIndex === -1) return\n\n    const pointerInfo = this.pointers[pointerIndex]\n\n    this._scopeFire('interactions:remove-pointer', {\n      pointer,\n      event,\n      eventTarget: null,\n      pointerIndex,\n      pointerInfo,\n      interaction: this as unknown as Interaction<never>,\n    })\n\n    this.pointers.splice(pointerIndex, 1)\n    this.pointerIsDown = false\n  }\n\n  /** @internal */\n  _updateLatestPointer(pointer: PointerType, event: PointerEventType, eventTarget: Node) {\n    this._latestPointer.pointer = pointer\n    this._latestPointer.event = event\n    this._latestPointer.eventTarget = eventTarget\n  }\n\n  destroy() {\n    this._latestPointer.pointer = null\n    this._latestPointer.event = null\n    this._latestPointer.eventTarget = null\n  }\n\n  /** @internal */\n  _createPreparedEvent<P extends EventPhase>(\n    event: PointerEventType,\n    phase: P,\n    preEnd?: boolean,\n    type?: string,\n  ) {\n    return new InteractEvent<T, P>(this, event, this.prepared.name, phase, this.element, preEnd, type)\n  }\n\n  /** @internal */\n  _fireEvent<P extends EventPhase>(iEvent: InteractEvent<T, P>) {\n    this.interactable?.fire(iEvent)\n\n    if (!this.prevEvent || iEvent.timeStamp >= this.prevEvent.timeStamp) {\n      this.prevEvent = iEvent\n    }\n  }\n\n  /** @internal */\n  _doPhase<P extends EventPhase>(\n    signalArg: Omit<DoPhaseArg<T, P>, 'iEvent'> & { iEvent?: InteractEvent<T, P> },\n  ) {\n    const { event, phase, preEnd, type } = signalArg\n    const { rect } = this\n\n    if (rect && phase === 'move') {\n      // update the rect changes due to pointer move\n      rectUtils.addEdges(this.edges, rect, this.coords.delta[this.interactable.options.deltaSource])\n\n      rect.width = rect.right - rect.left\n      rect.height = rect.bottom - rect.top\n    }\n\n    const beforeResult = this._scopeFire(`interactions:before-action-${phase}` as any, signalArg)\n\n    if (beforeResult === false) {\n      return false\n    }\n\n    const iEvent = (signalArg.iEvent = this._createPreparedEvent(event, phase, preEnd, type))\n\n    this._scopeFire(`interactions:action-${phase}` as any, signalArg)\n\n    if (phase === 'start') {\n      this.prevEvent = iEvent\n    }\n\n    this._fireEvent(iEvent)\n\n    this._scopeFire(`interactions:after-action-${phase}` as any, signalArg)\n\n    return true\n  }\n\n  /** @internal */\n  _now() {\n    return Date.now()\n  }\n}\n\nexport default Interaction\nexport { PointerInfo }\n"],"names":["_ProxyValues","_ProxyMethods","idCounter","Interaction","interactable","element","rect","_rects","edges","_scopeFire","prepared","name","axis","pointerType","pointers","downEvent","downPointer","_latestPointer","pointer","event","eventTarget","prevEvent","pointerIsDown","pointerWasMoved","_interacting","_ending","_stopped","_proxy","simulation","pointerMoveTolerance","doMove","warnOnce","signalArg","move","coords","start","pointerUtils","newCoords","prev","cur","delta","velocity","_id","constructor","_ref","scopeFire","that","key","Object","defineProperty","get","value","arguments","interaction","pointerDown","pointerIndex","updatePointer","pointerInfo","type","action","interacting","length","options","enabled","copyAction","getRect","extend","left","right","top","bottom","_doPhase","phase","pointerMove","modification","endResult","duplicateMove","page","x","y","client","dx","dy","hypot","getPointerIndex","duplicate","setCoordVelocity","copyCoords","setZeroCoords","pointerUp","curEventTarget","test","end","removePointer","documentBlur","endPhaseResult","stop","currentAction","pointerId","getPointerId","arr","findIndex","curPointer","id","getPointerInfo","down","PointerInfo","push","setCoords","map","p","_now","setCoordDeltas","downTime","timeStamp","downTarget","pointerExtend","_updateLatestPointer","splice","destroy","_createPreparedEvent","preEnd","InteractEvent","_fireEvent","iEvent","_this$interactable","fire","rectUtils","addEdges","deltaSource","width","height","beforeResult","Date","now"],"mappings":"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"}