{"version":3,"file":"interactableTargets.prod.js","sources":["interactableTargets.ts"],"sourcesContent":["import type { Interactable } from '@interactjs/core/Interactable'\nimport type { Scope, Plugin } from '@interactjs/core/scope'\nimport type { Element } from '@interactjs/core/types'\nimport extend from '@interactjs/utils/extend'\n\nimport type { PointerEventOptions } from '@interactjs/pointer-events/base'\n\ndeclare module '@interactjs/core/Interactable' {\n  interface Interactable {\n    pointerEvents(options: Partial<PointerEventOptions>): this\n    /** @internal */\n    __backCompatOption: (optionName: string, newValue: any) => any\n  }\n}\n\nfunction install(scope: Scope) {\n  const { Interactable } = scope\n\n  Interactable.prototype.pointerEvents = function (\n    this: Interactable,\n    options: Partial<PointerEventOptions>,\n  ) {\n    extend(this.events.options, options)\n\n    return this\n  }\n\n  const __backCompatOption = Interactable.prototype._backCompatOption\n\n  Interactable.prototype._backCompatOption = function (optionName, newValue) {\n    const ret = __backCompatOption.call(this, optionName, newValue)\n\n    if (ret === this) {\n      this.events.options[optionName] = newValue\n    }\n\n    return ret\n  }\n}\n\nconst plugin: Plugin = {\n  id: 'pointer-events/interactableTargets',\n  install,\n  listeners: {\n    'pointerEvents:collect-targets': ({ targets, node, type, eventTarget }, scope) => {\n      scope.interactables.forEachMatch(node, (interactable: Interactable) => {\n        const eventable = interactable.events\n        const options = eventable.options\n\n        if (\n          eventable.types[type] &&\n          eventable.types[type].length &&\n          interactable.testIgnoreAllow(options, node, eventTarget)\n        ) {\n          targets.push({\n            node,\n            eventable,\n            props: { interactable },\n          })\n        }\n      })\n    },\n\n    'interactable:new': ({ interactable }) => {\n      interactable.events.getRect = function (element: Element) {\n        return interactable.getRect(element)\n      }\n    },\n\n    'interactable:set': ({ interactable, options }, scope) => {\n      extend(interactable.events.options, scope.pointerEvents.defaults)\n      extend(interactable.events.options, options.pointerEvents || {})\n    },\n  },\n}\n\nexport default plugin\n"],"names":["install","Interactable","prototype","pointerEvents","options","extend","events","this","__backCompatOption","_backCompatOption","optionName","ret","newValue","plugin","id","_ref","scope","targets","node","type","eventTarget","forEachMatch","interactable","eventable","types","length","testIgnoreAllow","push","_ref2","getRect","element","_ref3","defaults"],"mappings":";;gEAeSA,MAAAA,aACDC,GAAEA,EAAcA,EAAQC,UAAAC,cAAA,SAAAC,GAM5BC,OAJFJ,OAAAA,KAAsBK,OAAAF,WAIbG,IAEP,QACDC,EAAAP,EAAAC,UAAAO,kBAEDR,8BAAiD,cAEjDA,MAAAA,EAAaC,EAAUO,KAAAA,KAA8BC,EAAAA,GAKnD,OAJMC,IAAMH,OAERG,KAAGL,OAAKF,QAAMM,GAAAE,GAElBD,CAEA,EAEJ,MAAAE,OAAA,CAEAC,GAAMD,qCACJC,gBACAd,UAAO,gCAkBH,CAjBOe,EAAAC,eACyBC,EAAAC,KAAED,EAAOE,KAAED,EAAIE,YAAED,GAAMC,EAAaJ,gBAAAK,aAAAH,GAAAI,IACpEN,MAAmBO,EAACF,EAAaH,OACzBK,EAASA,EAAenB,UACjBoB,MAAYL,MAAQK,MAAAL,GAAAM,QAAAH,EAAAI,gBAAAtB,EAAAc,EAAAE,IAEjCH,EACWU,KAAM,CAIfV,OACEC,YACAK,MAAS,kBAEX,GACF,EAEH,mBAAAK,GAED,IAAAN,aAAqBA,GAAEA,EAAcA,EAAAhB,OAAAuB,QAAA,SAAAC,GACnCR,OAAAA,UAA8BQ,EAC5B,CAAA,EAEH,kBAICzB,CAJD0B,EAAAf,oBAEoBM,EAAAlB,QAAEkB,GAAclB,EAASC,SAAAC,OAAAF,QAAAY,EAAAb,cAAA6B,UAC5C3B,OAAOiB,EAAahB,OAAOF,QAASY,EAAMb,eAAc6B,CAAAA,EAAQ,WAItEnB"}