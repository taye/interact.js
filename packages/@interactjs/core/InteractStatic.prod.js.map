{"version":3,"file":"InteractStatic.prod.js","sources":["InteractStatic.ts"],"sourcesContent":["import browser from '@interactjs/utils/browser'\nimport * as domUtils from '@interactjs/utils/domUtils'\nimport is from '@interactjs/utils/is'\nimport isNonNativeEvent from '@interactjs/utils/isNonNativeEvent'\nimport { warnOnce } from '@interactjs/utils/misc'\nimport * as pointerUtils from '@interactjs/utils/pointerUtils'\n\nimport type { Scope, Plugin } from '@interactjs/core/scope'\nimport type { Context, EventTypes, Listener, ListenersArg, Target } from '@interactjs/core/types'\n\nimport type { Interactable } from './Interactable'\nimport type { Options } from './options'\n\n/**\n * ```js\n * interact('#draggable').draggable(true)\n *\n * var rectables = interact('rect')\n * rectables\n *   .gesturable(true)\n *   .on('gesturemove', function (event) {\n *       // ...\n *   })\n * ```\n *\n * The methods of this variable can be used to set elements as interactables\n * and also to change various default settings.\n *\n * Calling it as a function and passing an element or a valid CSS selector\n * string returns an Interactable object which has various methods to configure\n * it.\n *\n * @param {Element | string} target The HTML or SVG Element to interact with\n * or CSS selector\n * @return {Interactable}\n */\nexport interface InteractStatic {\n  (target: Target, options?: Options): Interactable\n  getPointerAverage: typeof pointerUtils.pointerAverage\n  getTouchBBox: typeof pointerUtils.touchBBox\n  getTouchDistance: typeof pointerUtils.touchDistance\n  getTouchAngle: typeof pointerUtils.touchAngle\n  getElementRect: typeof domUtils.getElementRect\n  getElementClientRect: typeof domUtils.getElementClientRect\n  matchesSelector: typeof domUtils.matchesSelector\n  closest: typeof domUtils.closest\n  /** @internal */ globalEvents: any\n  version: string\n  /** @internal */ scope: Scope\n  /**\n   * Use a plugin\n   */\n  use(\n    plugin: Plugin,\n    options?: {\n      [key: string]: any\n    },\n  ): any\n  /**\n   * Check if an element or selector has been set with the `interact(target)`\n   * function\n   *\n   * @return {boolean} Indicates if the element or CSS selector was previously\n   * passed to interact\n   */\n  isSet(\n    /* The Element or string being searched for */\n    target: Target,\n    options?: any,\n  ): boolean\n  on(type: string | EventTypes, listener: ListenersArg, options?: object): any\n  off(type: EventTypes, listener: any, options?: object): any\n  debug(): any\n  /**\n   * Whether or not the browser supports touch input\n   */\n  supportsTouch(): boolean\n  /**\n   * Whether or not the browser supports PointerEvents\n   */\n  supportsPointerEvent(): boolean\n  /**\n   * Cancels all interactions (end events are not fired)\n   */\n  stop(): InteractStatic\n  /**\n   * Returns or sets the distance the pointer must be moved before an action\n   * sequence occurs. This also affects tolerance for tap events.\n   */\n  pointerMoveTolerance(\n    /** The movement from the start position must be greater than this value */\n    newValue?: number,\n  ): InteractStatic | number\n  addDocument(doc: Document, options?: object): void\n  removeDocument(doc: Document): void\n}\n\nexport function createInteractStatic(scope: Scope): InteractStatic {\n  const interact = ((target: Target, options: Options) => {\n    let interactable = scope.interactables.getExisting(target, options)\n\n    if (!interactable) {\n      interactable = scope.interactables.new(target, options)\n      interactable.events.global = interact.globalEvents\n    }\n\n    return interactable\n  }) as InteractStatic\n\n  // expose the functions used to calculate multi-touch properties\n  interact.getPointerAverage = pointerUtils.pointerAverage\n  interact.getTouchBBox = pointerUtils.touchBBox\n  interact.getTouchDistance = pointerUtils.touchDistance\n  interact.getTouchAngle = pointerUtils.touchAngle\n\n  interact.getElementRect = domUtils.getElementRect\n  interact.getElementClientRect = domUtils.getElementClientRect\n  interact.matchesSelector = domUtils.matchesSelector\n  interact.closest = domUtils.closest\n\n  interact.globalEvents = {} as any\n\n  // eslint-disable-next-line no-undef\n  interact.version = process.env.npm_package_version\n  interact.scope = scope\n  interact.use = function (plugin, options) {\n    this.scope.usePlugin(plugin, options)\n\n    return this\n  }\n\n  interact.isSet = function (target: Target, options?: { context?: Context }): boolean {\n    return !!this.scope.interactables.get(target, options && options.context)\n  }\n\n  interact.on = warnOnce(function on(type: string | EventTypes, listener: ListenersArg, options?: object) {\n    if (is.string(type) && type.search(' ') !== -1) {\n      type = type.trim().split(/ +/)\n    }\n\n    if (is.array(type)) {\n      for (const eventType of type as any[]) {\n        this.on(eventType, listener, options)\n      }\n\n      return this\n    }\n\n    if (is.object(type)) {\n      for (const prop in type) {\n        this.on(prop, (type as any)[prop], listener)\n      }\n\n      return this\n    }\n\n    // if it is an InteractEvent type, add listener to globalEvents\n    if (isNonNativeEvent(type, this.scope.actions)) {\n      // if this type of event was never bound\n      if (!this.globalEvents[type]) {\n        this.globalEvents[type] = [listener]\n      } else {\n        this.globalEvents[type].push(listener)\n      }\n    }\n    // If non InteractEvent type, addEventListener to document\n    else {\n      this.scope.events.add(this.scope.document, type, listener as Listener, { options })\n    }\n\n    return this\n  }, 'The interact.on() method is being deprecated')\n\n  interact.off = warnOnce(function off(type: EventTypes, listener: any, options?: object) {\n    if (is.string(type) && type.search(' ') !== -1) {\n      type = type.trim().split(/ +/)\n    }\n\n    if (is.array(type)) {\n      for (const eventType of type) {\n        this.off(eventType, listener, options)\n      }\n\n      return this\n    }\n\n    if (is.object(type)) {\n      for (const prop in type) {\n        this.off(prop, type[prop], listener)\n      }\n\n      return this\n    }\n\n    if (isNonNativeEvent(type, this.scope.actions)) {\n      let index: number\n\n      if (type in this.globalEvents && (index = this.globalEvents[type].indexOf(listener)) !== -1) {\n        this.globalEvents[type].splice(index, 1)\n      }\n    } else {\n      this.scope.events.remove(this.scope.document, type, listener, options)\n    }\n\n    return this\n  }, 'The interact.off() method is being deprecated')\n\n  interact.debug = function () {\n    return this.scope\n  }\n\n  interact.supportsTouch = function () {\n    return browser.supportsTouch\n  }\n\n  interact.supportsPointerEvent = function () {\n    return browser.supportsPointerEvent\n  }\n\n  interact.stop = function () {\n    for (const interaction of this.scope.interactions.list) {\n      interaction.stop()\n    }\n\n    return this\n  }\n\n  interact.pointerMoveTolerance = function (newValue?: number) {\n    if (is.number(newValue)) {\n      this.scope.interactions.pointerMoveTolerance = newValue\n\n      return this\n    }\n\n    return this.scope.interactions.pointerMoveTolerance\n  }\n\n  interact.addDocument = function (doc: Document, options?: object) {\n    this.scope.addDocument(doc, options)\n  }\n\n  interact.removeDocument = function (doc: Document) {\n    this.scope.removeDocument(doc)\n  }\n\n  return interact\n}\n"],"names":["createInteractStatic","scope","interact","target","options","interactable","interactables","getExisting","new","events","global","globalEvents","getPointerAverage","pointerUtils","pointerAverage","getTouchBBox","touchBBox","getTouchDistance","touchDistance","getTouchAngle","touchAngle","getElementRect","domUtils","getElementClientRect","matchesSelector","closest","version","process","use","plugin","this","usePlugin","isSet","get","context","on","warnOnce","type","listener","is","string","search","trim","split","array","eventType","object","prop","isNonNativeEvent","actions","push","add","document","off","index","indexOf","splice","remove","debug","supportsTouch","browser","supportsPointerEvent","stop","interaction","interactions","list","pointerMoveTolerance","newValue","number","addDocument","doc","removeDocument"],"mappings":"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"}