{"version":3,"file":"PointerEvent.prod.js","sources":["PointerEvent.ts"],"sourcesContent":["import { BaseEvent } from '@interactjs/core/BaseEvent'\nimport type Interaction from '@interactjs/core/Interaction'\nimport type { PointerEventType, PointerType, Point } from '@interactjs/core/types'\nimport * as pointerUtils from '@interactjs/utils/pointerUtils'\n\nexport class PointerEvent<T extends string = any> extends BaseEvent<never> {\n  declare type: T\n  declare originalEvent: PointerEventType\n  declare pointerId: number\n  declare pointerType: string\n  declare double: boolean\n  declare pageX: number\n  declare pageY: number\n  declare clientX: number\n  declare clientY: number\n  declare dt: number\n  declare eventable: any;\n  [key: string]: any\n\n  constructor(\n    type: T,\n    pointer: PointerType | PointerEvent<any>,\n    event: PointerEventType,\n    eventTarget: Node,\n    interaction: Interaction<never>,\n    timeStamp: number,\n  ) {\n    super(interaction)\n    pointerUtils.pointerExtend(this, event)\n\n    if (event !== pointer) {\n      pointerUtils.pointerExtend(this, pointer)\n    }\n\n    this.timeStamp = timeStamp\n    this.originalEvent = event\n    this.type = type\n    this.pointerId = pointerUtils.getPointerId(pointer)\n    this.pointerType = pointerUtils.getPointerType(pointer)\n    this.target = eventTarget\n    this.currentTarget = null\n\n    if (type === 'tap') {\n      const pointerIndex = interaction.getPointerIndex(pointer)\n      this.dt = this.timeStamp - interaction.pointers[pointerIndex].downTime\n\n      const interval = this.timeStamp - interaction.tapTime\n\n      this.double =\n        !!interaction.prevTap &&\n        interaction.prevTap.type !== 'doubletap' &&\n        interaction.prevTap.target === this.target &&\n        interval < 500\n    } else if (type === 'doubletap') {\n      this.dt = (pointer as PointerEvent<'tap'>).timeStamp - interaction.tapTime\n      this.double = true\n    }\n  }\n\n  _subtractOrigin({ x: originX, y: originY }: Point) {\n    this.pageX -= originX\n    this.pageY -= originY\n    this.clientX -= originX\n    this.clientY -= originY\n\n    return this\n  }\n\n  _addOrigin({ x: originX, y: originY }: Point) {\n    this.pageX += originX\n    this.pageY += originY\n    this.clientX += originX\n    this.clientY += originY\n\n    return this\n  }\n\n  /**\n   * Prevent the default behaviour of the original Event\n   */\n  preventDefault() {\n    this.originalEvent.preventDefault()\n  }\n}\n"],"names":["PointerEvent","BaseEvent","eventTarget","interaction","timeStamp","constructor","pointerUtils","pointerExtend","this","event","pointer","originalEvent","type","getPointerId","pointerId","getPointerType","pointerType","target","pointerIndex","getPointerIndex","dt","pointers","downTime","double","tapTime","prevTap","interval","_subtractOrigin","_ref","x","originX","pageX","pageY","clientX","_addOrigin","_ref2","preventDefault"],"mappings":";;iJAKaA,WAAAA,CAAAA,EAA6CC,EAAAA,EAASC,EAAQC,EAAAC,GAmCvE,GArBSC,MAAAA,GAQTC,aAAiBC,cAACC,KAAAC,GAClBH,IAA0BI,GAEtBD,aAAUC,cAASF,KAAAE,GAEvBF,KAAAJ,UAAAA,EAEAI,KAAKJ,gBACLI,KAAKG,KAAaC,EAClBJ,KAAKI,UAAWN,aAAAO,aAAAH,GAChBF,KAAKM,YAAYR,aAAyBS,eAAQL,GAClDF,KAAKQ,OAAAA,EACLR,KAAKS,mBACa,QAAdL,EAAc,CAEdA,MAAIM,EAAYf,EAAAgB,gBAAAT,GAClBF,KAAAY,kBAAqBjB,EAA2BkB,SAAAH,GAASI,SACzD,MAAKF,EAAmBZ,KAAAJ,UAAcD,UAEtCK,KAAAe,SAAcpB,WAAuC,cAAnBA,EAAYqB,QAAOZ,MAAAT,EAAAsB,QAAAR,SAAAT,KAAAS,QAAAS,EAAA,GAErD,KACe,cADJd,IAKNJ,KAAAY,GAAQV,EAAKN,UAAaD,EAAAqB,QAC/BhB,KAAKY,QAAMV,EAEb,CACF,eAAAiB,CAAAC,GAEAD,IAAgBE,EAAAC,EAAED,EAAGC,KAInB,OAJ+CtB,YAAAsB,EAC/CtB,KAAKuB,OAASD,EACdtB,KAAKwB,WACLxB,KAAKyB,SAAWH,EACJtB,IAEZ,CACF,UAAA0B,CAAAC,GAEAD,IAAWL,EAAAC,EAAED,EAAGC,KAId,OAJ0CtB,YAAAsB,EAC1CtB,KAAKuB,OAASD,EACdtB,KAAKwB,WACLxB,KAAKyB,SAAWH,EACJtB,IAEZ,CAKJ,cAAA4B,sBACmBA,gBACf,SAEJpC"}