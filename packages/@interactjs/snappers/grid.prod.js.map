{"version":3,"file":"grid.prod.js","sources":["grid.ts"],"sourcesContent":["import type { Rect, Point } from '@interactjs/core/types'\nimport type { SnapFunction, SnapTarget } from '@interactjs/modifiers/snap/pointer'\n\nexport interface GridOptionsBase {\n  range?: number\n  limits?: Rect\n  offset?: Point\n}\nexport interface GridOptionsXY extends GridOptionsBase {\n  x: number\n  y: number\n}\nexport interface GridOptionsTopLeft extends GridOptionsBase {\n  top?: number\n  left?: number\n}\nexport interface GridOptionsBottomRight extends GridOptionsBase {\n  bottom?: number\n  right?: number\n}\nexport interface GridOptionsWidthHeight extends GridOptionsBase {\n  width?: number\n  height?: number\n}\n\nexport type GridOptions = GridOptionsXY | GridOptionsTopLeft | GridOptionsBottomRight | GridOptionsWidthHeight\n\nexport default (grid: GridOptions) => {\n  const coordFields = (\n    [\n      ['x', 'y'],\n      ['left', 'top'],\n      ['right', 'bottom'],\n      ['width', 'height'],\n    ] as const\n  ).filter(([xField, yField]) => xField in grid || yField in grid)\n\n  const gridFunc: SnapFunction & {\n    grid: typeof grid\n    coordFields: typeof coordFields\n  } = (x, y) => {\n    const {\n      range,\n      limits = {\n        left: -Infinity,\n        right: Infinity,\n        top: -Infinity,\n        bottom: Infinity,\n      },\n      offset = { x: 0, y: 0 },\n    } = grid\n\n    const result: SnapTarget & {\n      grid: typeof grid\n    } = { range, grid, x: null as number, y: null as number }\n\n    for (const [xField, yField] of coordFields) {\n      const gridx = Math.round((x - offset.x) / (grid as any)[xField])\n      const gridy = Math.round((y - offset.y) / (grid as any)[yField])\n\n      result[xField] = Math.max(limits.left, Math.min(limits.right, gridx * (grid as any)[xField] + offset.x))\n      result[yField] = Math.max(limits.top, Math.min(limits.bottom, gridy * (grid as any)[yField] + offset.y))\n    }\n\n    return result\n  }\n\n  gridFunc.grid = grid\n  gridFunc.coordFields = coordFields\n\n  return gridFunc\n}\n"],"names":["grid","coordFields","filter","_ref","xField","yField","gridFunc","x","y","range","limits","left","Infinity","right","top","bottom","offset","result","gridx","Math","round","gridy","max","min"],"mappings":";;AA2BA,IAAAA,KAAAA,IACE,MAAMC,EACJ,CACE,CAAC,IAAK,KACN,CAAC,OAAQ,OACT,CAAC,QAAS,UACV,CAAC,QAAS,WAEZC,QAAOC,IAAA,IAAEC,EAAQC,GAAOF,EAAA,OAAKC,KAAUJ,GAAQK,KAAUL,CAAI,IAEzDM,EAGFA,CAACC,EAAGC,KACN,MAAMC,MACJA,EAAKC,OACLA,EAAS,CACPC,MAAOC,IACPC,MAAOD,IACPE,KAAMF,IACNG,OAAQH,KACTI,OACDA,EAAS,CAAET,EAAG,EAAGC,EAAG,IAClBR,EAEEiB,EAEF,CAAER,QAAOT,OAAMO,EAAG,KAAgBC,EAAG,MAEzC,IAAK,MAAOJ,EAAQC,KAAWJ,EAAa,CAC1C,MAAMiB,EAAQC,KAAKC,OAAOb,EAAIS,EAAOT,GAAMP,EAAaI,IAClDiB,EAAQF,KAAKC,OAAOZ,EAAIQ,EAAOR,GAAMR,EAAaK,IAExDY,EAAOb,GAAUe,KAAKG,IAAIZ,EAAOC,KAAMQ,KAAKI,IAAIb,EAAOG,MAAOK,EAASlB,EAAaI,GAAUY,EAAOT,IACrGU,EAAOZ,GAAUc,KAAKG,IAAIZ,EAAOI,IAAKK,KAAKI,IAAIb,EAAOK,OAAQM,EAASrB,EAAaK,GAAUW,EAAOR,GACvG,CAEA,OAAOS,CAAM,EAMf,OAHAX,EAASN,KAAOA,EAChBM,EAASL,YAAcA,EAEhBK,CAAQ"}