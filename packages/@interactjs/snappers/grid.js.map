{"version":3,"file":"grid.js","sources":["grid.ts"],"sourcesContent":["import type { Rect, Point } from '@interactjs/core/types'\nimport type { SnapFunction, SnapTarget } from '@interactjs/modifiers/snap/pointer'\n\nexport interface GridOptionsBase {\n  range?: number\n  limits?: Rect\n  offset?: Point\n}\nexport interface GridOptionsXY extends GridOptionsBase {\n  x: number\n  y: number\n}\nexport interface GridOptionsTopLeft extends GridOptionsBase {\n  top?: number\n  left?: number\n}\nexport interface GridOptionsBottomRight extends GridOptionsBase {\n  bottom?: number\n  right?: number\n}\nexport interface GridOptionsWidthHeight extends GridOptionsBase {\n  width?: number\n  height?: number\n}\n\nexport type GridOptions = GridOptionsXY | GridOptionsTopLeft | GridOptionsBottomRight | GridOptionsWidthHeight\n\nexport default (grid: GridOptions) => {\n  const coordFields = (\n    [\n      ['x', 'y'],\n      ['left', 'top'],\n      ['right', 'bottom'],\n      ['width', 'height'],\n    ] as const\n  ).filter(([xField, yField]) => xField in grid || yField in grid)\n\n  const gridFunc: SnapFunction & {\n    grid: typeof grid\n    coordFields: typeof coordFields\n  } = (x, y) => {\n    const {\n      range,\n      limits = {\n        left: -Infinity,\n        right: Infinity,\n        top: -Infinity,\n        bottom: Infinity,\n      },\n      offset = { x: 0, y: 0 },\n    } = grid\n\n    const result: SnapTarget & {\n      grid: typeof grid\n    } = { range, grid, x: null as number, y: null as number }\n\n    for (const [xField, yField] of coordFields) {\n      const gridx = Math.round((x - offset.x) / (grid as any)[xField])\n      const gridy = Math.round((y - offset.y) / (grid as any)[yField])\n\n      result[xField] = Math.max(limits.left, Math.min(limits.right, gridx * (grid as any)[xField] + offset.x))\n      result[yField] = Math.max(limits.top, Math.min(limits.bottom, gridy * (grid as any)[yField] + offset.y))\n    }\n\n    return result\n  }\n\n  gridFunc.grid = grid\n  gridFunc.coordFields = coordFields\n\n  return gridFunc\n}\n"],"names":["grid","coordFields","filter","_ref","xField","yField","gridFunc","x","y","range","limits","left","Infinity","right","top","bottom","offset","result","gridx","Math","round","gridy","max","min"],"mappings":";;;;;;;;AA2BA,WAAA,CAAgBA,IAAiB,IAAK;AACpC,EAAA,MAAMC,WAAW,GACf,CACE,CAAC,GAAG,EAAE,GAAG,CAAC,EACV,CAAC,MAAM,EAAE,KAAK,CAAC,EACf,CAAC,OAAO,EAAE,QAAQ,CAAC,EACnB,CAAC,OAAO,EAAE,QAAQ,CAAC,CACpB,CACDC,MAAM,CAACC,IAAA,IAAA;AAAA,IAAA,IAAC,CAACC,MAAM,EAAEC,MAAM,CAAC,GAAAF,IAAA,CAAA;AAAA,IAAA,OAAKC,MAAM,IAAIJ,IAAI,IAAIK,MAAM,IAAIL,IAAI,CAAA;GAAC,CAAA,CAAA;AAEhE,EAAA,MAAMM,QAGL,GAAGA,CAACC,CAAC,EAAEC,CAAC,KAAK;IACZ,MAAM;MACJC,KAAK;AACLC,MAAAA,MAAM,GAAG;QACPC,IAAI,EAAE,CAACC,QAAQ;AACfC,QAAAA,KAAK,EAAED,QAAQ;QACfE,GAAG,EAAE,CAACF,QAAQ;AACdG,QAAAA,MAAM,EAAEH,QAAAA;OACT;AACDI,MAAAA,MAAM,GAAG;AAAET,QAAAA,CAAC,EAAE,CAAC;AAAEC,QAAAA,CAAC,EAAE,CAAA;AAAE,OAAA;AACxB,KAAC,GAAGR,IAAI,CAAA;AAER,IAAA,MAAMiB,MAEL,GAAG;MAAER,KAAK;MAAET,IAAI;AAAEO,MAAAA,CAAC,EAAE,IAAc;AAAEC,MAAAA,CAAC,EAAE,IAAA;KAAgB,CAAA;IAEzD,KAAK,MAAM,CAACJ,MAAM,EAAEC,MAAM,CAAC,IAAIJ,WAAW,EAAE;AAC1C,MAAA,MAAMiB,KAAK,GAAGC,IAAI,CAACC,KAAK,CAAC,CAACb,CAAC,GAAGS,MAAM,CAACT,CAAC,IAAKP,IAAI,CAASI,MAAM,CAAC,CAAC,CAAA;AAChE,MAAA,MAAMiB,KAAK,GAAGF,IAAI,CAACC,KAAK,CAAC,CAACZ,CAAC,GAAGQ,MAAM,CAACR,CAAC,IAAKR,IAAI,CAASK,MAAM,CAAC,CAAC,CAAA;AAEhEY,MAAAA,MAAM,CAACb,MAAM,CAAC,GAAGe,IAAI,CAACG,GAAG,CAACZ,MAAM,CAACC,IAAI,EAAEQ,IAAI,CAACI,GAAG,CAACb,MAAM,CAACG,KAAK,EAAEK,KAAK,GAAIlB,IAAI,CAASI,MAAM,CAAC,GAAGY,MAAM,CAACT,CAAC,CAAC,CAAC,CAAA;AACxGU,MAAAA,MAAM,CAACZ,MAAM,CAAC,GAAGc,IAAI,CAACG,GAAG,CAACZ,MAAM,CAACI,GAAG,EAAEK,IAAI,CAACI,GAAG,CAACb,MAAM,CAACK,MAAM,EAAEM,KAAK,GAAIrB,IAAI,CAASK,MAAM,CAAC,GAAGW,MAAM,CAACR,CAAC,CAAC,CAAC,CAAA;AAC1G,KAAA;AAEA,IAAA,OAAOS,MAAM,CAAA;GACd,CAAA;EAEDX,QAAQ,CAACN,IAAI,GAAGA,IAAI,CAAA;EACpBM,QAAQ,CAACL,WAAW,GAAGA,WAAW,CAAA;AAElC,EAAA,OAAOK,QAAQ,CAAA;AACjB,CAAC;;;;"}