{"version":3,"file":"pointerUtils.prod.js","sources":["pointerUtils.ts"],"sourcesContent":["import type { InteractEvent } from '@interactjs/core/InteractEvent'\nimport type { CoordsSetMember, PointerType, Point, PointerEventType, Element } from '@interactjs/core/types'\n\nimport browser from './browser'\nimport dom from './domObjects'\nimport * as domUtils from './domUtils'\nimport hypot from './hypot'\nimport is from './is'\nimport pointerExtend from './pointerExtend'\n\nexport function copyCoords(dest: CoordsSetMember, src: CoordsSetMember) {\n  dest.page = dest.page || ({} as any)\n  dest.page.x = src.page.x\n  dest.page.y = src.page.y\n\n  dest.client = dest.client || ({} as any)\n  dest.client.x = src.client.x\n  dest.client.y = src.client.y\n\n  dest.timeStamp = src.timeStamp\n}\n\nexport function setCoordDeltas(targetObj: CoordsSetMember, prev: CoordsSetMember, cur: CoordsSetMember) {\n  targetObj.page.x = cur.page.x - prev.page.x\n  targetObj.page.y = cur.page.y - prev.page.y\n  targetObj.client.x = cur.client.x - prev.client.x\n  targetObj.client.y = cur.client.y - prev.client.y\n  targetObj.timeStamp = cur.timeStamp - prev.timeStamp\n}\n\nexport function setCoordVelocity(targetObj: CoordsSetMember, delta: CoordsSetMember) {\n  const dt = Math.max(delta.timeStamp / 1000, 0.001)\n\n  targetObj.page.x = delta.page.x / dt\n  targetObj.page.y = delta.page.y / dt\n  targetObj.client.x = delta.client.x / dt\n  targetObj.client.y = delta.client.y / dt\n  targetObj.timeStamp = dt\n}\n\nexport function setZeroCoords(targetObj: CoordsSetMember) {\n  targetObj.page.x = 0\n  targetObj.page.y = 0\n  targetObj.client.x = 0\n  targetObj.client.y = 0\n}\n\nexport function isNativePointer(pointer: any) {\n  return pointer instanceof dom.Event || pointer instanceof dom.Touch\n}\n\n// Get specified X/Y coords for mouse or event.touches[0]\nexport function getXY(type: string, pointer: PointerType | InteractEvent, xy: Point) {\n  xy = xy || ({} as Point)\n  type = type || 'page'\n\n  xy.x = pointer[(type + 'X') as 'pageX']\n  xy.y = pointer[(type + 'Y') as 'pageY']\n\n  return xy\n}\n\nexport function getPageXY(pointer: PointerType | InteractEvent, page?: Point) {\n  page = page || { x: 0, y: 0 }\n\n  // Opera Mobile handles the viewport and scrolling oddly\n  if (browser.isOperaMobile && isNativePointer(pointer)) {\n    getXY('screen', pointer, page)\n\n    page.x += window.scrollX\n    page.y += window.scrollY\n  } else {\n    getXY('page', pointer, page)\n  }\n\n  return page\n}\n\nexport function getClientXY(pointer: PointerType, client: Point) {\n  client = client || ({} as any)\n\n  if (browser.isOperaMobile && isNativePointer(pointer)) {\n    // Opera Mobile handles the viewport and scrolling oddly\n    getXY('screen', pointer, client)\n  } else {\n    getXY('client', pointer, client)\n  }\n\n  return client\n}\n\nexport function getPointerId(pointer: { pointerId?: number; identifier?: number; type?: string }) {\n  return is.number(pointer.pointerId) ? pointer.pointerId! : pointer.identifier!\n}\n\nexport function setCoords(dest: CoordsSetMember, pointers: any[], timeStamp: number) {\n  const pointer = pointers.length > 1 ? pointerAverage(pointers) : pointers[0]\n\n  getPageXY(pointer, dest.page)\n  getClientXY(pointer, dest.client)\n\n  dest.timeStamp = timeStamp\n}\n\nexport function getTouchPair(event: TouchEvent | PointerType[]) {\n  const touches: PointerType[] = []\n\n  // array of touches is supplied\n  if (is.array(event)) {\n    touches[0] = event[0]\n    touches[1] = event[1]\n  }\n  // an event\n  else {\n    if (event.type === 'touchend') {\n      if (event.touches.length === 1) {\n        touches[0] = event.touches[0]\n        touches[1] = event.changedTouches[0]\n      } else if (event.touches.length === 0) {\n        touches[0] = event.changedTouches[0]\n        touches[1] = event.changedTouches[1]\n      }\n    } else {\n      touches[0] = event.touches[0]\n      touches[1] = event.touches[1]\n    }\n  }\n\n  return touches\n}\n\nexport function pointerAverage(pointers: PointerType[]) {\n  const average = {\n    pageX: 0,\n    pageY: 0,\n    clientX: 0,\n    clientY: 0,\n    screenX: 0,\n    screenY: 0,\n  }\n\n  type CoordKeys = keyof typeof average\n\n  for (const pointer of pointers) {\n    for (const prop in average) {\n      average[prop as CoordKeys] += pointer[prop as CoordKeys]\n    }\n  }\n  for (const prop in average) {\n    average[prop as CoordKeys] /= pointers.length\n  }\n\n  return average\n}\n\nexport function touchBBox(event: PointerType[]) {\n  if (!event.length) {\n    return null\n  }\n\n  const touches = getTouchPair(event)\n  const minX = Math.min(touches[0].pageX, touches[1].pageX)\n  const minY = Math.min(touches[0].pageY, touches[1].pageY)\n  const maxX = Math.max(touches[0].pageX, touches[1].pageX)\n  const maxY = Math.max(touches[0].pageY, touches[1].pageY)\n\n  return {\n    x: minX,\n    y: minY,\n    left: minX,\n    top: minY,\n    right: maxX,\n    bottom: maxY,\n    width: maxX - minX,\n    height: maxY - minY,\n  }\n}\n\nexport function touchDistance(event: PointerType[] | TouchEvent, deltaSource: string) {\n  const sourceX = (deltaSource + 'X') as 'pageX'\n  const sourceY = (deltaSource + 'Y') as 'pageY'\n  const touches = getTouchPair(event)\n\n  const dx = touches[0][sourceX] - touches[1][sourceX]\n  const dy = touches[0][sourceY] - touches[1][sourceY]\n\n  return hypot(dx, dy)\n}\n\nexport function touchAngle(event: PointerType[] | TouchEvent, deltaSource: string) {\n  const sourceX = (deltaSource + 'X') as 'pageX'\n  const sourceY = (deltaSource + 'Y') as 'pageY'\n  const touches = getTouchPair(event)\n  const dx = touches[1][sourceX] - touches[0][sourceX]\n  const dy = touches[1][sourceY] - touches[0][sourceY]\n  const angle = (180 * Math.atan2(dy, dx)) / Math.PI\n\n  return angle\n}\n\nexport function getPointerType(pointer: { pointerType?: string; identifier?: number; type?: string }) {\n  return is.string(pointer.pointerType)\n    ? pointer.pointerType\n    : is.number(pointer.pointerType)\n      ? [undefined, undefined, 'touch', 'pen', 'mouse'][pointer.pointerType]!\n      : // if the PointerEvent API isn't available, then the \"pointer\" must\n        // be either a MouseEvent, TouchEvent, or Touch object\n        /touch/.test(pointer.type || '') || pointer instanceof dom.Touch\n        ? 'touch'\n        : 'mouse'\n}\n\n// [ event.target, event.currentTarget ]\nexport function getEventTargets(event: Event) {\n  const path = is.func(event.composedPath)\n    ? (event.composedPath() as Element[])\n    : (event as unknown as { path: Element[] }).path\n\n  return [\n    domUtils.getActualElement(path ? path[0] : (event.target as Element)),\n    domUtils.getActualElement(event.currentTarget as Element),\n  ]\n}\n\nexport function newCoords(): CoordsSetMember {\n  return {\n    page: { x: 0, y: 0 },\n    client: { x: 0, y: 0 },\n    timeStamp: 0,\n  }\n}\n\nexport function coordsToEvent(coords: MockCoords) {\n  const event = {\n    coords,\n    get page() {\n      return this.coords.page\n    },\n    get client() {\n      return this.coords.client\n    },\n    get timeStamp() {\n      return this.coords.timeStamp\n    },\n    get pageX() {\n      return this.coords.page.x\n    },\n    get pageY() {\n      return this.coords.page.y\n    },\n    get clientX() {\n      return this.coords.client.x\n    },\n    get clientY() {\n      return this.coords.client.y\n    },\n    get pointerId() {\n      return this.coords.pointerId\n    },\n    get target() {\n      return this.coords.target\n    },\n    get type() {\n      return this.coords.type\n    },\n    get pointerType() {\n      return this.coords.pointerType\n    },\n    get buttons() {\n      return this.coords.buttons\n    },\n    preventDefault() {},\n  }\n\n  return event as typeof event & PointerType & PointerEventType\n}\n\nexport interface MockCoords {\n  page: Point\n  client: Point\n  timeStamp?: number\n  pointerId?: any\n  target?: any\n  type?: string\n  pointerType?: string\n  buttons?: number\n}\n\nexport { pointerExtend }\n"],"names":["dest","page","copyCoords","x","src","client","setCoordDeltas","targetObj","prev","cur","timeStamp","setCoordVelocity","delta","dt","Math","setZeroCoords","isNativePointer","pointer","Event","domObjects","Touch","getXY","type","xy","getPageXY","browser","isOperaMobile","window","scrollX","getClientXY","getPointerId","pointerId","identifier","setCoords","pointers","length","getTouchPair","event","is","array","touches","changedTouches","pointerAverage","pageX","pageY","clientX","clientY","screenX","prop","average","touchBBox","minX","min","minY","maxX","max","y","left","top","right","maxY","bottom","width","touchDistance","deltaSource","sourceX","sourceY","dx","hypot","touchAngle","dy","getPointerType","pointerType","number","undefined","test","getEventTargets","composedPath","path","target","getActualElement","currentTarget","newCoords","coordsToEvent","coords","this","buttons","preventDefault"],"mappings":"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"}