{"version":3,"file":"size.prod.js","sources":["size.ts"],"sourcesContent":["// This modifier allows snapping of the size of targets during resize\n// interactions.\n\nimport extend from '@interactjs/utils/extend'\nimport is from '@interactjs/utils/is'\n\nimport { makeModifier } from '../base'\nimport type { ModifierArg } from '../types'\n\nimport type { SnapOptions, SnapState } from './pointer'\nimport { snap } from './pointer'\n\nexport type SnapSizeOptions = Pick<SnapOptions, 'targets' | 'offset' | 'endOnly' | 'range' | 'enabled'>\n\nfunction start(arg: ModifierArg<SnapState>) {\n  const { state, edges } = arg\n  const { options } = state\n\n  if (!edges) {\n    return null\n  }\n\n  arg.state = {\n    options: {\n      targets: null,\n      relativePoints: [\n        {\n          x: edges.left ? 0 : 1,\n          y: edges.top ? 0 : 1,\n        },\n      ],\n      offset: options.offset || 'self',\n      origin: { x: 0, y: 0 },\n      range: options.range,\n    },\n  }\n\n  state.targetFields = state.targetFields || [\n    ['width', 'height'],\n    ['x', 'y'],\n  ]\n\n  snap.start(arg)\n  state.offsets = arg.state.offsets\n\n  arg.state = state\n}\n\nfunction set(arg) {\n  const { interaction, state, coords } = arg\n  const { options, offsets } = state\n  const relative = {\n    x: coords.x - offsets[0].x,\n    y: coords.y - offsets[0].y,\n  }\n\n  state.options = extend({}, options)\n  state.options.targets = []\n\n  for (const snapTarget of options.targets || []) {\n    let target\n\n    if (is.func(snapTarget)) {\n      target = snapTarget(relative.x, relative.y, interaction)\n    } else {\n      target = snapTarget\n    }\n\n    if (!target) {\n      continue\n    }\n\n    for (const [xField, yField] of state.targetFields) {\n      if (xField in target || yField in target) {\n        target.x = target[xField]\n        target.y = target[yField]\n\n        break\n      }\n    }\n\n    state.options.targets.push(target)\n  }\n\n  const returnValue = snap.set(arg)\n\n  state.options = options\n\n  return returnValue\n}\n\nconst defaults: SnapSizeOptions = {\n  range: Infinity,\n  targets: null,\n  offset: null,\n  endOnly: false,\n  enabled: false,\n}\n\nconst snapSize = {\n  start,\n  set,\n  defaults,\n}\n\nexport default makeModifier(snapSize, 'snapSize')\nexport { snapSize }\n"],"names":["start","arg","state","edges","options","targets","relativePoints","x","left","y","top","offset","origin","range","targetFields","snap","offsets","set","interaction","coords","relative","extend","snapTarget","target","is","func","xField","yField","push","returnValue","defaults","Infinity","endOnly","enabled","snapSize","snapSize$1","makeModifier"],"mappings":";;iVAcA,SAASA,MAAMC,GACb,MAAMC,MAAEA,EAAKC,MAAEA,GAAUF,GACnBG,QAAEA,GAAYF,EAEpB,IAAKC,EACH,OAAO,KAGTF,EAAIC,MAAQ,CACVE,QAAS,CACPC,QAAS,KACTC,eAAgB,CACd,CACEC,EAAGJ,EAAMK,KAAO,EAAI,EACpBC,EAAGN,EAAMO,IAAM,EAAI,IAGvBC,OAAQP,EAAQO,QAAU,OAC1BC,OAAQ,CAAEL,EAAG,EAAGE,EAAG,GACnBI,MAAOT,EAAQS,QAInBX,EAAMY,aAAeZ,EAAMY,cAAgB,CACzC,CAAC,QAAS,UACV,CAAC,IAAK,MAGRC,KAAKf,MAAMC,GACXC,EAAMc,QAAUf,EAAIC,MAAMc,QAE1Bf,EAAIC,MAAQA,CACd,CAEA,SAASe,IAAIhB,GACX,MAAMiB,YAAEA,EAAWhB,MAAEA,EAAKiB,OAAEA,GAAWlB,GACjCG,QAAEA,EAAOY,QAAEA,GAAYd,EACvBkB,EAAW,CACfb,EAAGY,EAAOZ,EAAIS,EAAQ,GAAGT,EACzBE,EAAGU,EAAOV,EAAIO,EAAQ,GAAGP,GAG3BP,EAAME,QAAUiB,OAAO,CAAE,EAAEjB,GAC3BF,EAAME,QAAQC,QAAU,GAExB,IAAK,MAAMiB,KAAclB,EAAQC,SAAW,GAAI,CAC9C,IAAIkB,EAQJ,GALEA,EADEC,GAAGC,KAAKH,GACDA,EAAWF,EAASb,EAAGa,EAASX,EAAGS,GAEnCI,EAGNC,EAAL,CAIA,IAAK,MAAOG,EAAQC,KAAWzB,EAAMY,aACnC,GAAIY,KAAUH,GAAUI,KAAUJ,EAAQ,CACxCA,EAAOhB,EAAIgB,EAAOG,GAClBH,EAAOd,EAAIc,EAAOI,GAElB,KACF,CAGFzB,EAAME,QAAQC,QAAQuB,KAAKL,EAX3B,CAYF,CAEA,MAAMM,EAAcd,KAAKE,IAAIhB,GAI7B,OAFAC,EAAME,QAAUA,EAETyB,CACT,CAEA,MAAMC,SAA4B,CAChCjB,MAAOkB,IACP1B,QAAS,KACTM,OAAQ,KACRqB,SAAS,EACTC,SAAS,GAGLC,SAAW,CACflC,YACAiB,QACAa,mBAGF,IAAAK,WAAeC,aAAaF,SAAU"}