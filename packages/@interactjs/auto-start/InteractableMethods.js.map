{"version":3,"file":"InteractableMethods.js","sources":["InteractableMethods.ts"],"sourcesContent":["import type { Interactable } from '@interactjs/core/Interactable'\nimport type { Interaction } from '@interactjs/core/Interaction'\nimport type { Scope } from '@interactjs/core/scope'\nimport type { ActionProps, PointerType, PointerEventType, Element } from '@interactjs/core/types'\nimport is from '@interactjs/utils/is'\nimport { warnOnce } from '@interactjs/utils/misc'\n\ndeclare module '@interactjs/core/Interactable' {\n  interface Interactable {\n    getAction: (\n      this: Interactable,\n      pointer: PointerType,\n      event: PointerEventType,\n      interaction: Interaction,\n      element: Element,\n    ) => ActionProps | null\n    styleCursor(newValue: boolean): this\n    styleCursor(): boolean\n    /**\n     * Returns or sets whether the the cursor should be changed depending on the\n     * action that would be performed if the mouse were pressed and dragged.\n     *\n     * @param {boolean} [newValue]\n     * @return {boolean | Interactable} The current setting or this Interactable\n     */\n    styleCursor(newValue?: boolean): boolean | this\n    actionChecker(checker: Function): Interactable\n    actionChecker(): Function\n    /**\n     * ```js\n     * interact('.resize-drag')\n     *   .resizable(true)\n     *   .draggable(true)\n     *   .actionChecker(function (pointer, event, action, interactable, element, interaction) {\n     *\n     *     if (interact.matchesSelector(event.target, '.drag-handle')) {\n     *       // force drag with handle target\n     *       action.name = drag\n     *     }\n     *     else {\n     *       // resize from the top and right edges\n     *       action.name  = 'resize'\n     *       action.edges = { top: true, right: true }\n     *     }\n     *\n     *     return action\n     * })\n     * ```\n     *\n     * Returns or sets the function used to check action to be performed on\n     * pointerDown\n     *\n     * @param checker - A function which takes a pointer event,\n     * defaultAction string, interactable, element and interaction as parameters\n     * and returns an object with name property 'drag' 'resize' or 'gesture' and\n     * optionally an `edges` object with boolean 'top', 'left', 'bottom' and right\n     * props.\n     * @returns The checker function or this Interactable\n     */\n    actionChecker(checker?: Function): Interactable | Function\n    /** @returns This interactable */\n    ignoreFrom(newValue: string | Element | null): Interactable\n    /** @returns The current ignoreFrom value */\n    ignoreFrom(): string | Element | null\n    /**\n     * If the target of the `mousedown`, `pointerdown` or `touchstart` event or any\n     * of it's parents match the given CSS selector or Element, no\n     * drag/resize/gesture is started.\n     *\n     * @deprecated\n     * Don't use this method. Instead set the `ignoreFrom` option for each action\n     * or for `pointerEvents`\n     *\n     * ```js\n     * interact(targett)\n     *   .draggable({\n     *     ignoreFrom: 'input, textarea, a[href]'',\n     *   })\n     *   .pointerEvents({\n     *     ignoreFrom: '[no-pointer]',\n     *   })\n     * ```\n     * Interactable\n     */\n    ignoreFrom(\n      /** a CSS selector string, an Element or `null` to not ignore any elements */\n      newValue?: string | Element | null,\n    ): Interactable | string | Element | null\n    allowFrom(): boolean\n    /**\n     *\n     * A drag/resize/gesture is started only If the target of the `mousedown`,\n     * `pointerdown` or `touchstart` event or any of it's parents match the given\n     * CSS selector or Element.\n     *\n     * @deprecated\n     * Don't use this method. Instead set the `allowFrom` option for each action\n     * or for `pointerEvents`\n     *\n     * ```js\n     * interact(targett)\n     *   .resizable({\n     *     allowFrom: '.resize-handle',\n     *   .pointerEvents({\n     *     allowFrom: '.handle',,\n     *   })\n     * ```\n     *\n     * @param {string | Element | null} [newValue]\n     * @return {string | Element | object} The current allowFrom value or this\n     * Interactable\n     */\n    allowFrom(\n      /** A CSS selector string, an Element or `null` to allow from any element */\n      newValue: string | Element | null,\n    ): Interactable\n  }\n}\n\nfunction install(scope: Scope) {\n  const {\n    Interactable, // tslint:disable-line no-shadowed-variable\n  } = scope\n\n  Interactable.prototype.getAction = function getAction(\n    this: Interactable,\n    pointer: PointerType,\n    event: PointerEventType,\n    interaction: Interaction,\n    element: Element,\n  ): ActionProps {\n    const action = defaultActionChecker(this, event, interaction, element, scope)\n\n    if (this.options.actionChecker) {\n      return this.options.actionChecker(pointer, event, action, this, element, interaction)\n    }\n\n    return action\n  }\n\n  Interactable.prototype.ignoreFrom = warnOnce(function (this: Interactable, newValue) {\n    return this._backCompatOption('ignoreFrom', newValue)\n  }, 'Interactable.ignoreFrom() has been deprecated. Use Interactble.draggable({ignoreFrom: newValue}).')\n\n  Interactable.prototype.allowFrom = warnOnce(function (this: Interactable, newValue) {\n    return this._backCompatOption('allowFrom', newValue)\n  }, 'Interactable.allowFrom() has been deprecated. Use Interactble.draggable({allowFrom: newValue}).')\n\n  Interactable.prototype.actionChecker = actionChecker\n\n  Interactable.prototype.styleCursor = styleCursor\n}\n\nfunction defaultActionChecker(\n  interactable: Interactable,\n  event: PointerEventType,\n  interaction: Interaction,\n  element: Element,\n  scope: Scope,\n) {\n  const rect = interactable.getRect(element)\n  const buttons =\n    (event as MouseEvent).buttons ||\n    {\n      0: 1,\n      1: 4,\n      3: 8,\n      4: 16,\n    }[(event as MouseEvent).button as 0 | 1 | 3 | 4]\n  const arg = {\n    action: null,\n    interactable,\n    interaction,\n    element,\n    rect,\n    buttons,\n  }\n\n  scope.fire('auto-start:check', arg)\n\n  return arg.action\n}\n\nfunction styleCursor(this: Interactable, newValue?: boolean) {\n  if (is.bool(newValue)) {\n    this.options.styleCursor = newValue\n\n    return this\n  }\n\n  if (newValue === null) {\n    delete this.options.styleCursor\n\n    return this\n  }\n\n  return this.options.styleCursor\n}\n\nfunction actionChecker(this: Interactable, checker?: any) {\n  if (is.func(checker)) {\n    this.options.actionChecker = checker\n\n    return this\n  }\n\n  if (checker === null) {\n    delete this.options.actionChecker\n\n    return this\n  }\n\n  return this.options.actionChecker\n}\n\nexport default {\n  id: 'auto-start/interactableMethods',\n  install,\n}\n"],"names":["install","scope","Interactable","prototype","getAction","pointer","event","interaction","element","action","defaultActionChecker","options","actionChecker","ignoreFrom","warnOnce","newValue","_backCompatOption","allowFrom","styleCursor","interactable","rect","getRect","buttons","button","arg","fire","is","bool","checker","func","id"],"mappings":";;;;;;;;;;;AAuHA,SAASA,OAAOA,CAACC,KAAY,EAAE;EAC7B,MAAM;AACJC,IAAAA,YAAY;AACd,GAAC,GAAGD,KAAK,CAAA;AAETC,EAAAA,YAAY,CAACC,SAAS,CAACC,SAAS,GAAG,SAASA,SAASA,CAEnDC,OAAoB,EACpBC,KAAuB,EACvBC,WAAwB,EACxBC,OAAgB,EACH;AACb,IAAA,MAAMC,MAAM,GAAGC,oBAAoB,CAAC,IAAI,EAAEJ,KAAK,EAAEC,WAAW,EAAEC,OAAO,EAAEP,KAAK,CAAC,CAAA;AAE7E,IAAA,IAAI,IAAI,CAACU,OAAO,CAACC,aAAa,EAAE;AAC9B,MAAA,OAAO,IAAI,CAACD,OAAO,CAACC,aAAa,CAACP,OAAO,EAAEC,KAAK,EAAEG,MAAM,EAAE,IAAI,EAAED,OAAO,EAAED,WAAW,CAAC,CAAA;AACvF,KAAA;AAEA,IAAA,OAAOE,MAAM,CAAA;GACd,CAAA;EAEDP,YAAY,CAACC,SAAS,CAACU,UAAU,GAAGC,QAAQ,CAAC,UAA8BC,QAAQ,EAAE;AACnF,IAAA,OAAO,IAAI,CAACC,iBAAiB,CAAC,YAAY,EAAED,QAAQ,CAAC,CAAA;GACtD,EAAE,mGAAmG,CAAC,CAAA;EAEvGb,YAAY,CAACC,SAAS,CAACc,SAAS,GAAGH,QAAQ,CAAC,UAA8BC,QAAQ,EAAE;AAClF,IAAA,OAAO,IAAI,CAACC,iBAAiB,CAAC,WAAW,EAAED,QAAQ,CAAC,CAAA;GACrD,EAAE,iGAAiG,CAAC,CAAA;AAErGb,EAAAA,YAAY,CAACC,SAAS,CAACS,aAAa,GAAGA,aAAa,CAAA;AAEpDV,EAAAA,YAAY,CAACC,SAAS,CAACe,WAAW,GAAGA,WAAW,CAAA;AAClD,CAAA;AAEA,SAASR,oBAAoBA,CAC3BS,YAA0B,EAC1Bb,KAAuB,EACvBC,WAAwB,EACxBC,OAAgB,EAChBP,KAAY,EACZ;AACA,EAAA,MAAMmB,IAAI,GAAGD,YAAY,CAACE,OAAO,CAACb,OAAO,CAAC,CAAA;AAC1C,EAAA,MAAMc,OAAO,GACVhB,KAAK,CAAgBgB,OAAO,IAC7B;AACE,IAAA,CAAC,EAAE,CAAC;AACJ,IAAA,CAAC,EAAE,CAAC;AACJ,IAAA,CAAC,EAAE,CAAC;AACJ,IAAA,CAAC,EAAE,EAAA;AACL,GAAC,CAAEhB,KAAK,CAAgBiB,MAAM,CAAkB,CAAA;AAClD,EAAA,MAAMC,GAAG,GAAG;AACVf,IAAAA,MAAM,EAAE,IAAI;IACZU,YAAY;IACZZ,WAAW;IACXC,OAAO;IACPY,IAAI;AACJE,IAAAA,OAAAA;GACD,CAAA;AAEDrB,EAAAA,KAAK,CAACwB,IAAI,CAAC,kBAAkB,EAAED,GAAG,CAAC,CAAA;EAEnC,OAAOA,GAAG,CAACf,MAAM,CAAA;AACnB,CAAA;AAEA,SAASS,WAAWA,CAAqBH,QAAkB,EAAE;AAC3D,EAAA,IAAIW,EAAE,CAACC,IAAI,CAACZ,QAAQ,CAAC,EAAE;AACrB,IAAA,IAAI,CAACJ,OAAO,CAACO,WAAW,GAAGH,QAAQ,CAAA;AAEnC,IAAA,OAAO,IAAI,CAAA;AACb,GAAA;EAEA,IAAIA,QAAQ,KAAK,IAAI,EAAE;AACrB,IAAA,OAAO,IAAI,CAACJ,OAAO,CAACO,WAAW,CAAA;AAE/B,IAAA,OAAO,IAAI,CAAA;AACb,GAAA;AAEA,EAAA,OAAO,IAAI,CAACP,OAAO,CAACO,WAAW,CAAA;AACjC,CAAA;AAEA,SAASN,aAAaA,CAAqBgB,OAAa,EAAE;AACxD,EAAA,IAAIF,EAAE,CAACG,IAAI,CAACD,OAAO,CAAC,EAAE;AACpB,IAAA,IAAI,CAACjB,OAAO,CAACC,aAAa,GAAGgB,OAAO,CAAA;AAEpC,IAAA,OAAO,IAAI,CAAA;AACb,GAAA;EAEA,IAAIA,OAAO,KAAK,IAAI,EAAE;AACpB,IAAA,OAAO,IAAI,CAACjB,OAAO,CAACC,aAAa,CAAA;AAEjC,IAAA,OAAO,IAAI,CAAA;AACb,GAAA;AAEA,EAAA,OAAO,IAAI,CAACD,OAAO,CAACC,aAAa,CAAA;AACnC,CAAA;AAEA,0BAAe;AACbkB,EAAAA,EAAE,EAAE,gCAAgC;AACpC9B,EAAAA,OAAAA;AACF,CAAC;;;;"}