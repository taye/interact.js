{"version":3,"file":"clone.js","sources":["clone.ts"],"sourcesContent":["import * as arr from './arr'\nimport is from './is'\n\n// tslint:disable-next-line ban-types\nexport default function clone<T extends Object>(source: T): Partial<T> {\n  const dest = {} as Partial<T>\n\n  for (const prop in source) {\n    const value = source[prop]\n\n    if (is.plainObject(value)) {\n      dest[prop] = clone(value) as any\n    } else if (is.array(value)) {\n      dest[prop] = arr.from(value) as typeof value\n    } else {\n      dest[prop] = value\n    }\n  }\n\n  return dest\n}\n"],"names":["clone","source","dest","prop","value","is","plainObject","array","arr"],"mappings":";;;;;;;;;;;;;AAGA;AACe,SAASA,KAAKA,CAAmBC,MAAS,EAAc;EACrE,MAAMC,IAAI,GAAG,EAAgB,CAAA;AAE7B,EAAA,KAAK,MAAMC,IAAI,IAAIF,MAAM,EAAE;AACzB,IAAA,MAAMG,KAAK,GAAGH,MAAM,CAACE,IAAI,CAAC,CAAA;AAE1B,IAAA,IAAIE,EAAE,CAACC,WAAW,CAACF,KAAK,CAAC,EAAE;AACzBF,MAAAA,IAAI,CAACC,IAAI,CAAC,GAAGH,KAAK,CAACI,KAAK,CAAQ,CAAA;KACjC,MAAM,IAAIC,EAAE,CAACE,KAAK,CAACH,KAAK,CAAC,EAAE;MAC1BF,IAAI,CAACC,IAAI,CAAC,GAAGK,IAAQ,CAACJ,KAAK,CAAiB,CAAA;AAC9C,KAAC,MAAM;AACLF,MAAAA,IAAI,CAACC,IAAI,CAAC,GAAGC,KAAK,CAAA;AACpB,KAAA;AACF,GAAA;AAEA,EAAA,OAAOF,IAAI,CAAA;AACb;;;;"}