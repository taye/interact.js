{"version":3,"file":"InteractableSet.prod.js","sources":["InteractableSet.ts"],"sourcesContent":["import * as arr from '@interactjs/utils/arr'\nimport * as domUtils from '@interactjs/utils/domUtils'\nimport extend from '@interactjs/utils/extend'\nimport is from '@interactjs/utils/is'\n\nimport type { Interactable } from '@interactjs/core/Interactable'\nimport type { OptionsArg, Options } from '@interactjs/core/options'\nimport type { Scope } from '@interactjs/core/scope'\nimport type { Target } from '@interactjs/core/types'\n\ndeclare module '@interactjs/core/scope' {\n  interface SignalArgs {\n    'interactable:new': {\n      interactable: Interactable\n      target: Target\n      options: OptionsArg\n      win: Window\n    }\n  }\n}\n\nexport class InteractableSet {\n  // all set interactables\n  list: Interactable[] = []\n\n  selectorMap: {\n    [selector: string]: Interactable[]\n  } = {}\n\n  scope: Scope\n\n  constructor(scope: Scope) {\n    this.scope = scope\n    scope.addListeners({\n      'interactable:unset': ({ interactable }) => {\n        const { target } = interactable\n        const interactablesOnTarget: Interactable[] = is.string(target)\n          ? this.selectorMap[target]\n          : (target as any)[this.scope.id]\n\n        const targetIndex = arr.findIndex(interactablesOnTarget, (i) => i === interactable)\n        interactablesOnTarget.splice(targetIndex, 1)\n      },\n    })\n  }\n\n  new(target: Target, options?: any): Interactable {\n    options = extend(options || {}, {\n      actions: this.scope.actions,\n    })\n    const interactable = new this.scope.Interactable(target, options, this.scope.document, this.scope.events)\n\n    this.scope.addDocument(interactable._doc)\n    this.list.push(interactable)\n\n    if (is.string(target)) {\n      if (!this.selectorMap[target]) {\n        this.selectorMap[target] = []\n      }\n      this.selectorMap[target].push(interactable)\n    } else {\n      if (!(interactable.target as any)[this.scope.id]) {\n        Object.defineProperty(target, this.scope.id, {\n          value: [],\n          configurable: true,\n        })\n      }\n\n      ;(target as any)[this.scope.id].push(interactable)\n    }\n\n    this.scope.fire('interactable:new', {\n      target,\n      options,\n      interactable,\n      win: this.scope._win,\n    })\n\n    return interactable\n  }\n\n  getExisting(target: Target, options?: Options) {\n    const context = (options && options.context) || this.scope.document\n    const isSelector = is.string(target)\n    const interactablesOnTarget: Interactable[] = isSelector\n      ? this.selectorMap[target as string]\n      : (target as any)[this.scope.id]\n\n    if (!interactablesOnTarget) return undefined\n\n    return arr.find(\n      interactablesOnTarget,\n      (interactable) =>\n        interactable._context === context && (isSelector || interactable.inContext(target as any)),\n    )\n  }\n\n  forEachMatch<T>(node: Node, callback: (interactable: Interactable) => T): T | void {\n    for (const interactable of this.list) {\n      let ret: T\n\n      if (\n        (is.string(interactable.target)\n          ? // target is a selector and the element matches\n            is.element(node) && domUtils.matchesSelector(node, interactable.target)\n          : // target is the element\n            node === interactable.target) &&\n        // the element is in context\n        interactable.inContext(node)\n      ) {\n        ret = callback(interactable)\n      }\n\n      if (ret !== undefined) {\n        return ret\n      }\n    }\n  }\n}\n"],"names":["constructor","list","selectorMap","scope","addListeners","_ref","interactable","target","is","string","this","id","interactablesOnTarget","arr","findIndex","targetIndex","options","new","extend","actions","Interactable","document","events","addDocument","push","Object","defineProperty","value","fire","_win","getExisting","context","isSelector","_context","inContext","forEachMatch","node","callback","element","domUtils","matchesSelector","undefined","ret","InteractableSet"],"mappings":";;kMAqBO,WAAAA,IAELC,KAAuBA,KAAE,GAEzBC,KAAAA,YAEM,CAAA,OAEDC,WAAA,EAELH,KAAAA,MAAYG,EACVA,EAAUC,aAAQ,CAClBD,qBAAmBE,IACjB,IAAAC,aAAuBA,GAAEA,EAAc,aAC/BC,GAAEA,IAAuBC,GAAAC,OAAAF,GAAAG,KAAAR,YAAAK,GAAAA,EAAAG,KAAAP,MAAAQ,IACzBC,EAAqCC,IAAAC,oBACtBP,IAGrBK,EAAoBC,OAAaE,EAAsB,EAAA,GAG3D,CACF,IAAAR,EAAAS,GAEGC,EAAiBD,OAAaA,GAAgB,CAAA,EAAA,SACrCE,KAAMf,MAAQgB,UAExB,MAAEb,EAAA,IAAAI,KAAAP,MAAAiB,aAAAb,EAAAS,EAAAN,KAAAP,MAAAkB,SAAAX,KAAAP,MAAAmB,QA2BF,OA1BAZ,KAAAP,MAAkBoB,YAAOjB,EAAWc,MAEpCV,KAAKP,KAAKqB,KAACD,GACPf,GAAKC,OAAKF,IAEPE,iBAAgBF,KACrBG,KAASR,eAAoB,IAE7BQ,KAAAR,YAAAK,GAAAiB,KAAAlB,KAEKA,EAAAC,OAAAG,KAAAP,MAAAQ,KACDc,OAAcC,eAAOnB,EAAmBG,KAAGP,MAAGQ,GAAA,CAChDc,MAAOC,GACLC,cAAS,IAGbpB,EAAAG,KAAAP,MAAAQ,IAAAa,KAAAlB,IAGFI,KAAAP,MAAAyB,KAAA,mBAAA,UAGErB,UACAS,eACAV,IAAYI,KAAAP,MAAA0B,OAEZvB,CAEF,CACF,WAAAwB,CAAAvB,EAAAS,GAEWc,MAAAA,EAAed,GAAqBA,EAAAe,SAAArB,KAAAP,MAAAkB,SACvCU,EAAWf,GAAAA,OAAkBT,GAC7ByB,EAA6BA,EAACtB,KAAAR,YAAAK,GAAAA,EAAAG,KAAAP,MAAAQ,IACpC,GAAAC,EAIA,OAAKA,IAAAA,KAAAA,MAAuCN,EAAA2B,WAAAF,IAAAC,GAAA1B,EAAA4B,UAAA3B,KAE5C,CAKF,YAAA4B,CAAAC,EAAAC,GAEYF,IAAAA,MAAIC,KAAmE1B,KAAAT,KAAA,KACtEK,EAaT,OAZUG,OAAAH,EAAAC,QAIJC,GAAA8B,QAAAF,IAAAG,SAAAC,gBAAAJ,EAAA9B,EAAAC,QAEA6B,IAAA9B,EAAAC,SAEJD,EAAA4B,UAAAE,SACaF,SAGfO,IAAAC,EAEIA,OAAQD,CAEZ,CACF,SAEJE"}