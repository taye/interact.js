{"version":3,"file":"plugin.prod.js","sources":["plugin.ts"],"sourcesContent":["import type { Interactable } from '@interactjs/core/Interactable'\nimport type { EventPhase, InteractEvent } from '@interactjs/core/InteractEvent'\nimport type { Interaction } from '@interactjs/core/Interaction'\nimport type { PerActionDefaults } from '@interactjs/core/options'\nimport type { Scope, Plugin } from '@interactjs/core/scope'\nimport type {\n  ActionName,\n  ActionProps,\n  EdgeOptions,\n  FullRect,\n  ListenersArg,\n  OrBoolean,\n  Point,\n  Rect,\n} from '@interactjs/core/types'\nimport * as dom from '@interactjs/utils/domUtils'\nimport extend from '@interactjs/utils/extend'\nimport is from '@interactjs/utils/is'\n\nexport type EdgeName = 'top' | 'left' | 'bottom' | 'right'\n\ndeclare module '@interactjs/core/Interactable' {\n  interface Interactable {\n    resizable(): ResizableOptions\n    resizable(options: Partial<OrBoolean<ResizableOptions>> | boolean): this\n    /**\n     * ```js\n     * interact(element).resizable({\n     *   onstart: function (event) {},\n     *   onmove : function (event) {},\n     *   onend  : function (event) {},\n     *\n     *   edges: {\n     *     top   : true,       // Use pointer coords to check for resize.\n     *     left  : false,      // Disable resizing from left edge.\n     *     bottom: '.resize-s',// Resize if pointer target matches selector\n     *     right : handleEl    // Resize if pointer target is the given Element\n     *   },\n     *\n     *   // Width and height can be adjusted independently. When `true`, width and\n     *   // height are adjusted at a 1:1 ratio.\n     *   square: false,\n     *\n     *   // Width and height can be adjusted independently. When `true`, width and\n     *   // height maintain the aspect ratio they had when resizing started.\n     *   preserveAspectRatio: false,\n     *\n     *   // a value of 'none' will limit the resize rect to a minimum of 0x0\n     *   // 'negate' will allow the rect to have negative width/height\n     *   // 'reposition' will keep the width/height positive by swapping\n     *   // the top and bottom edges and/or swapping the left and right edges\n     *   invert: 'none' || 'negate' || 'reposition'\n     *\n     *   // limit multiple resizes.\n     *   // See the explanation in the {@link Interactable.draggable} example\n     *   max: Infinity,\n     *   maxPerElement: 1,\n     * })\n     *\n     * var isResizeable = interact(element).resizable()\n     * ```\n     *\n     * Gets or sets whether resize actions can be performed on the target\n     *\n     * @param options - true/false or An object with event\n     * listeners to be fired on resize events (object makes the Interactable\n     * resizable)\n     * @returns A boolean indicating if this can be the\n     * target of resize elements, or this Interactable\n     */\n    resizable(options?: Partial<OrBoolean<ResizableOptions>> | boolean): this | ResizableOptions\n  }\n}\n\ndeclare module '@interactjs/core/Interaction' {\n  interface Interaction<T extends ActionName | null = ActionName> {\n    resizeAxes: 'x' | 'y' | 'xy'\n    styleCursor(newValue: boolean): this\n    styleCursor(): boolean\n    resizeStartAspectRatio: number\n  }\n}\n\ndeclare module '@interactjs/core/options' {\n  interface ActionDefaults {\n    resize: ResizableOptions\n  }\n}\n\ndeclare module '@interactjs/core/types' {\n  interface ActionMap {\n    resize?: typeof resize\n  }\n}\n\nexport interface ResizableOptions extends PerActionDefaults {\n  square?: boolean\n  preserveAspectRatio?: boolean\n  edges?: EdgeOptions | null\n  axis?: 'x' | 'y' | 'xy' // deprecated\n  invert?: 'none' | 'negate' | 'reposition'\n  margin?: number\n  squareResize?: boolean\n  oninertiastart?: ListenersArg\n  onstart?: ListenersArg\n  onmove?: ListenersArg\n  onend?: ListenersArg\n}\n\nexport interface ResizeEvent<P extends EventPhase = EventPhase> extends InteractEvent<'resize', P> {\n  deltaRect?: FullRect\n  edges?: ActionProps['edges']\n}\n\nfunction install(scope: Scope) {\n  const {\n    actions,\n    browser,\n    Interactable, // tslint:disable-line no-shadowed-variable\n    defaults,\n  } = scope\n\n  // Less Precision with touch input\n\n  resize.cursors = initCursors(browser)\n  resize.defaultMargin = browser.supportsTouch || browser.supportsPointerEvent ? 20 : 10\n\n  Interactable.prototype.resizable = function (this: Interactable, options: ResizableOptions | boolean) {\n    return resizable(this, options, scope)\n  } as Interactable['resizable']\n\n  actions.map.resize = resize\n  actions.methodDict.resize = 'resizable'\n\n  defaults.actions.resize = resize.defaults\n}\n\nfunction resizeChecker(arg) {\n  const { interaction, interactable, element, rect, buttons } = arg\n\n  if (!rect) {\n    return undefined\n  }\n\n  const page = extend({}, interaction.coords.cur.page)\n  const resizeOptions = interactable.options.resize\n\n  if (\n    !(resizeOptions && resizeOptions.enabled) ||\n    // check mouseButton setting if the pointer is down\n    (interaction.pointerIsDown &&\n      /mouse|pointer/.test(interaction.pointerType) &&\n      (buttons & resizeOptions.mouseButtons) === 0)\n  ) {\n    return undefined\n  }\n\n  // if using resize.edges\n  if (is.object(resizeOptions.edges)) {\n    const resizeEdges = {\n      left: false,\n      right: false,\n      top: false,\n      bottom: false,\n    }\n\n    for (const edge in resizeEdges) {\n      resizeEdges[edge] = checkResizeEdge(\n        edge,\n        resizeOptions.edges[edge],\n        page,\n        interaction._latestPointer.eventTarget,\n        element,\n        rect,\n        resizeOptions.margin || resize.defaultMargin,\n      )\n    }\n\n    resizeEdges.left = resizeEdges.left && !resizeEdges.right\n    resizeEdges.top = resizeEdges.top && !resizeEdges.bottom\n\n    if (resizeEdges.left || resizeEdges.right || resizeEdges.top || resizeEdges.bottom) {\n      arg.action = {\n        name: 'resize',\n        edges: resizeEdges,\n      }\n    }\n  } else {\n    const right = resizeOptions.axis !== 'y' && page.x > rect.right - resize.defaultMargin\n    const bottom = resizeOptions.axis !== 'x' && page.y > rect.bottom - resize.defaultMargin\n\n    if (right || bottom) {\n      arg.action = {\n        name: 'resize',\n        axes: (right ? 'x' : '') + (bottom ? 'y' : ''),\n      }\n    }\n  }\n\n  return arg.action ? false : undefined\n}\n\nfunction resizable(interactable: Interactable, options: OrBoolean<ResizableOptions> | boolean, scope: Scope) {\n  if (is.object(options)) {\n    interactable.options.resize.enabled = options.enabled !== false\n    interactable.setPerAction('resize', options)\n    interactable.setOnEvents('resize', options)\n\n    if (is.string(options.axis) && /^x$|^y$|^xy$/.test(options.axis)) {\n      interactable.options.resize.axis = options.axis\n    } else if (options.axis === null) {\n      interactable.options.resize.axis = scope.defaults.actions.resize.axis\n    }\n\n    if (is.bool(options.preserveAspectRatio)) {\n      interactable.options.resize.preserveAspectRatio = options.preserveAspectRatio\n    } else if (is.bool(options.square)) {\n      interactable.options.resize.square = options.square\n    }\n\n    return interactable\n  }\n  if (is.bool(options)) {\n    interactable.options.resize.enabled = options\n\n    return interactable\n  }\n  return interactable.options.resize\n}\n\nfunction checkResizeEdge(\n  name: string,\n  value: any,\n  page: Point,\n  element: Node,\n  interactableElement: Element,\n  rect: Rect,\n  margin: number,\n) {\n  // false, '', undefined, null\n  if (!value) {\n    return false\n  }\n\n  // true value, use pointer coords and element rect\n  if (value === true) {\n    // if dimensions are negative, \"switch\" edges\n    const width = is.number(rect.width) ? rect.width : rect.right - rect.left\n    const height = is.number(rect.height) ? rect.height : rect.bottom - rect.top\n\n    // don't use margin greater than half the relevent dimension\n    margin = Math.min(margin, Math.abs((name === 'left' || name === 'right' ? width : height) / 2))\n\n    if (width < 0) {\n      if (name === 'left') {\n        name = 'right'\n      } else if (name === 'right') {\n        name = 'left'\n      }\n    }\n    if (height < 0) {\n      if (name === 'top') {\n        name = 'bottom'\n      } else if (name === 'bottom') {\n        name = 'top'\n      }\n    }\n\n    if (name === 'left') {\n      const edge = width >= 0 ? rect.left : rect.right\n      return page.x < edge + margin\n    }\n    if (name === 'top') {\n      const edge = height >= 0 ? rect.top : rect.bottom\n      return page.y < edge + margin\n    }\n\n    if (name === 'right') {\n      return page.x > (width >= 0 ? rect.right : rect.left) - margin\n    }\n    if (name === 'bottom') {\n      return page.y > (height >= 0 ? rect.bottom : rect.top) - margin\n    }\n  }\n\n  // the remaining checks require an element\n  if (!is.element(element)) {\n    return false\n  }\n\n  return is.element(value)\n    ? // the value is an element to use as a resize handle\n      value === element\n    : // otherwise check if element matches value as selector\n      dom.matchesUpTo(element, value, interactableElement)\n}\n\n/* eslint-disable multiline-ternary */\n// eslint-disable-next-line @typescript-eslint/consistent-type-imports\nfunction initCursors(browser: typeof import('@interactjs/utils/browser').default) {\n  return browser.isIe9\n    ? {\n        x: 'e-resize',\n        y: 's-resize',\n        xy: 'se-resize',\n\n        top: 'n-resize',\n        left: 'w-resize',\n        bottom: 's-resize',\n        right: 'e-resize',\n        topleft: 'se-resize',\n        bottomright: 'se-resize',\n        topright: 'ne-resize',\n        bottomleft: 'ne-resize',\n      }\n    : {\n        x: 'ew-resize',\n        y: 'ns-resize',\n        xy: 'nwse-resize',\n\n        top: 'ns-resize',\n        left: 'ew-resize',\n        bottom: 'ns-resize',\n        right: 'ew-resize',\n        topleft: 'nwse-resize',\n        bottomright: 'nwse-resize',\n        topright: 'nesw-resize',\n        bottomleft: 'nesw-resize',\n      }\n}\n/* eslint-enable multiline-ternary */\n\nfunction start({ iEvent, interaction }: { iEvent: InteractEvent<any, any>; interaction: Interaction }) {\n  if (interaction.prepared.name !== 'resize' || !interaction.prepared.edges) {\n    return\n  }\n\n  const resizeEvent = iEvent as ResizeEvent\n  const rect = interaction.rect\n\n  interaction._rects = {\n    start: extend({}, rect),\n    corrected: extend({}, rect),\n    previous: extend({}, rect),\n    delta: {\n      left: 0,\n      right: 0,\n      width: 0,\n      top: 0,\n      bottom: 0,\n      height: 0,\n    },\n  }\n\n  resizeEvent.edges = interaction.prepared.edges\n  resizeEvent.rect = interaction._rects.corrected\n  resizeEvent.deltaRect = interaction._rects.delta\n}\n\nfunction move({ iEvent, interaction }: { iEvent: InteractEvent<any, any>; interaction: Interaction }) {\n  if (interaction.prepared.name !== 'resize' || !interaction.prepared.edges) return\n\n  const resizeEvent = iEvent as ResizeEvent\n  const resizeOptions = interaction.interactable.options.resize\n  const invert = resizeOptions.invert\n  const invertible = invert === 'reposition' || invert === 'negate'\n\n  const current = interaction.rect\n  const { start: startRect, corrected, delta: deltaRect, previous } = interaction._rects\n\n  extend(previous, corrected)\n\n  if (invertible) {\n    // if invertible, copy the current rect\n    extend(corrected, current)\n\n    if (invert === 'reposition') {\n      // swap edge values if necessary to keep width/height positive\n      if (corrected.top > corrected.bottom) {\n        const swap = corrected.top\n\n        corrected.top = corrected.bottom\n        corrected.bottom = swap\n      }\n      if (corrected.left > corrected.right) {\n        const swap = corrected.left\n\n        corrected.left = corrected.right\n        corrected.right = swap\n      }\n    }\n  } else {\n    // if not invertible, restrict to minimum of 0x0 rect\n    corrected.top = Math.min(current.top, startRect.bottom)\n    corrected.bottom = Math.max(current.bottom, startRect.top)\n    corrected.left = Math.min(current.left, startRect.right)\n    corrected.right = Math.max(current.right, startRect.left)\n  }\n\n  corrected.width = corrected.right - corrected.left\n  corrected.height = corrected.bottom - corrected.top\n\n  for (const edge in corrected) {\n    deltaRect[edge] = corrected[edge] - previous[edge]\n  }\n\n  resizeEvent.edges = interaction.prepared.edges\n  resizeEvent.rect = corrected\n  resizeEvent.deltaRect = deltaRect\n}\n\nfunction end({ iEvent, interaction }: { iEvent: InteractEvent<any, any>; interaction: Interaction }) {\n  if (interaction.prepared.name !== 'resize' || !interaction.prepared.edges) return\n\n  const resizeEvent = iEvent as ResizeEvent\n\n  resizeEvent.edges = interaction.prepared.edges\n  resizeEvent.rect = interaction._rects.corrected\n  resizeEvent.deltaRect = interaction._rects.delta\n}\n\nfunction updateEventAxes({\n  iEvent,\n  interaction,\n}: {\n  iEvent: InteractEvent<any, any>\n  interaction: Interaction\n}) {\n  if (interaction.prepared.name !== 'resize' || !interaction.resizeAxes) return\n\n  const options = interaction.interactable.options\n  const resizeEvent = iEvent as ResizeEvent\n\n  if (options.resize.square) {\n    if (interaction.resizeAxes === 'y') {\n      resizeEvent.delta.x = resizeEvent.delta.y\n    } else {\n      resizeEvent.delta.y = resizeEvent.delta.x\n    }\n    resizeEvent.axes = 'xy'\n  } else {\n    resizeEvent.axes = interaction.resizeAxes\n\n    if (interaction.resizeAxes === 'x') {\n      resizeEvent.delta.y = 0\n    } else if (interaction.resizeAxes === 'y') {\n      resizeEvent.delta.x = 0\n    }\n  }\n}\n\nconst resize: Plugin = {\n  id: 'actions/resize',\n  before: ['actions/drag'],\n  install,\n  listeners: {\n    'interactions:new': ({ interaction }) => {\n      interaction.resizeAxes = 'xy'\n    },\n\n    'interactions:action-start': (arg) => {\n      start(arg)\n      updateEventAxes(arg)\n    },\n    'interactions:action-move': (arg) => {\n      move(arg)\n      updateEventAxes(arg)\n    },\n    'interactions:action-end': end,\n    'auto-start:check': resizeChecker,\n  },\n\n  defaults: {\n    square: false,\n    preserveAspectRatio: false,\n    axis: 'xy',\n\n    // use default margin\n    margin: NaN,\n\n    // object with props left, right, top, bottom which are\n    // true/false values to resize when the pointer is over that edge,\n    // CSS selectors to match the handles for each direction\n    // or the Elements for each handle\n    edges: null,\n\n    // a value of 'none' will limit the resize rect to a minimum of 0x0\n    // 'negate' will alow the rect to have negative width/height\n    // 'reposition' will keep the width/height positive by swapping\n    // the top and bottom edges and/or swapping the left and right edges\n    invert: 'none',\n  } as ResizableOptions,\n\n  cursors: null as ReturnType<typeof initCursors>,\n\n  getCursor({ edges, axis, name }: ActionProps) {\n    const cursors = resize.cursors\n    let result: string = null\n\n    if (axis) {\n      result = cursors[name + axis]\n    } else if (edges) {\n      let cursorKey = ''\n\n      for (const edge of ['top', 'bottom', 'left', 'right']) {\n        if (edges[edge]) {\n          cursorKey += edge\n        }\n      }\n\n      result = cursors[cursorKey]\n    }\n\n    return result\n  },\n\n  filterEventType: (type: string) => type.search('resize') === 0,\n\n  defaultMargin: null as number,\n}\n\nexport default resize\n"],"names":["install","actions","browser","Interactable","defaults","resize","cursors","supportsPointerEvent","prototype","supportsTouch","this","scope","map","methodDict","resizeChecker","arg","interaction","interactable","element","rect","buttons","page","extend","coords","cur","options","resizeOptions","enabled","pointerIsDown","test","pointerType","mouseButtons","is","object","edges","left","right","top","edge","resizeEdges","_latestPointer","eventTarget","margin","defaultMargin","bottom","action","name","axis","x","y","undefined","resizable","setPerAction","bool","preserveAspectRatio","square","checkResizeEdge","value","interactableElement","width","number","height","Math","min","abs","domUtils","matchesUpTo","initCursors","xy","topleft","bottomright","topright","bottomleft","start","iEvent","_ref","prepared","resizeEvent","_rects","corrected","previous","move","_ref2","invert","invertible","startRect","deltaRect","delta","current","swap","max","end","_ref3","updateEventAxes","_ref4","resizeAxes","axes","id","before","_ref5","NaN","_ref6","getCursor","result","cursorKey","type","search","filterEventType"],"mappings":"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"}