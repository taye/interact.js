{"version":3,"file":"plugin.js","sources":["plugin.ts"],"sourcesContent":["import type { Interactable } from '@interactjs/core/Interactable'\nimport type { DoAnyPhaseArg, Interaction } from '@interactjs/core/Interaction'\nimport type { Scope, Plugin } from '@interactjs/core/scope'\nimport type { ActionName, ActionProps, Element } from '@interactjs/core/types'\nimport * as arr from '@interactjs/utils/arr'\nimport { copyAction } from '@interactjs/utils/misc'\nimport * as pointerUtils from '@interactjs/utils/pointerUtils'\nimport { tlbrToXywh } from '@interactjs/utils/rect'\n\ndeclare module '@interactjs/core/scope' {\n  interface SignalArgs {\n    'interactions:before-action-reflow': Omit<DoAnyPhaseArg, 'iEvent'>\n    'interactions:action-reflow': DoAnyPhaseArg\n    'interactions:after-action-reflow': DoAnyPhaseArg\n  }\n}\n\ndeclare module '@interactjs/core/Interactable' {\n  interface Interactable {\n    /**\n     * ```js\n     * const interactable = interact(target)\n     * const drag = { name: drag, axis: 'x' }\n     * const resize = { name: resize, edges: { left: true, bottom: true }\n     *\n     * interactable.reflow(drag)\n     * interactable.reflow(resize)\n     * ```\n     *\n     * Start an action sequence to re-apply modifiers, check drops, etc.\n     *\n     * @param { Object } action The action to begin\n     * @param { string } action.name The name of the action\n     * @returns { Promise } A promise that resolves to the `Interactable` when actions on all targets have ended\n     */\n    reflow<T extends ActionName>(action: ActionProps<T>): ReturnType<typeof doReflow>\n  }\n}\n\ndeclare module '@interactjs/core/Interaction' {\n  interface Interaction {\n    _reflowPromise: Promise<void>\n    _reflowResolve: (...args: unknown[]) => void\n  }\n}\n\ndeclare module '@interactjs/core/InteractEvent' {\n  interface PhaseMap {\n    reflow?: true\n  }\n}\n\nfunction install(scope: Scope) {\n  const { Interactable } = scope\n\n  scope.actions.phases.reflow = true\n\n  Interactable.prototype.reflow = function (action: ActionProps) {\n    return doReflow(this, action, scope)\n  }\n}\n\nfunction doReflow<T extends ActionName>(\n  interactable: Interactable,\n  action: ActionProps<T>,\n  scope: Scope,\n): Promise<Interactable> {\n  const elements = interactable.getAllElements()\n\n  // tslint:disable-next-line variable-name\n  const Promise = (scope.window as any).Promise\n  const promises: Array<Promise<null>> | null = Promise ? [] : null\n\n  for (const element of elements) {\n    const rect = interactable.getRect(element as HTMLElement | SVGElement)\n\n    if (!rect) {\n      break\n    }\n\n    const runningInteraction = arr.find(scope.interactions.list, (interaction: Interaction) => {\n      return (\n        interaction.interacting() &&\n        interaction.interactable === interactable &&\n        interaction.element === element &&\n        interaction.prepared.name === action.name\n      )\n    })\n    let reflowPromise: Promise<null>\n\n    if (runningInteraction) {\n      runningInteraction.move()\n\n      if (promises) {\n        reflowPromise =\n          runningInteraction._reflowPromise ||\n          new Promise((resolve: any) => {\n            runningInteraction._reflowResolve = resolve\n          })\n      }\n    } else {\n      const xywh = tlbrToXywh(rect)\n      const coords = {\n        page: { x: xywh.x, y: xywh.y },\n        client: { x: xywh.x, y: xywh.y },\n        timeStamp: scope.now(),\n      }\n\n      const event = pointerUtils.coordsToEvent(coords)\n      reflowPromise = startReflow<T>(scope, interactable, element, action, event)\n    }\n\n    if (promises) {\n      promises.push(reflowPromise)\n    }\n  }\n\n  return promises && Promise.all(promises).then(() => interactable)\n}\n\nfunction startReflow<T extends ActionName>(\n  scope: Scope,\n  interactable: Interactable,\n  element: Element,\n  action: ActionProps<T>,\n  event: any,\n) {\n  const interaction = scope.interactions.new({ pointerType: 'reflow' })\n  const signalArg = {\n    interaction,\n    event,\n    pointer: event,\n    eventTarget: element,\n    phase: 'reflow',\n  } as const\n\n  interaction.interactable = interactable\n  interaction.element = element\n  interaction.prevEvent = event\n  interaction.updatePointer(event, event, element, true)\n  pointerUtils.setZeroCoords(interaction.coords.delta)\n\n  copyAction(interaction.prepared, action)\n  interaction._doPhase(signalArg)\n\n  const { Promise } = scope.window as unknown as { Promise: PromiseConstructor }\n  const reflowPromise = Promise\n    ? new Promise<undefined>((resolve) => {\n        interaction._reflowResolve = resolve\n      })\n    : undefined\n\n  interaction._reflowPromise = reflowPromise\n  interaction.start(action, interactable, element)\n\n  if (interaction._interacting) {\n    interaction.move(signalArg)\n    interaction.end(event)\n  } else {\n    interaction.stop()\n    interaction._reflowResolve()\n  }\n\n  interaction.removePointer(event, event)\n\n  return reflowPromise\n}\n\nconst reflow: Plugin = {\n  id: 'reflow',\n  install,\n  listeners: {\n    // remove completed reflow interactions\n    'interactions:stop': ({ interaction }, scope) => {\n      if (interaction.pointerType === 'reflow') {\n        if (interaction._reflowResolve) {\n          interaction._reflowResolve()\n        }\n\n        arr.remove(scope.interactions.list, interaction)\n      }\n    },\n  },\n}\n\nexport default reflow\n"],"names":["install","scope","Interactable","actions","phases","reflow","prototype","action","doReflow","interactable","elements","getAllElements","Promise","window","promises","element","rect","getRect","runningInteraction","arr","find","interactions","list","interaction","interacting","prepared","name","reflowPromise","move","_reflowPromise","resolve","_reflowResolve","xywh","tlbrToXywh","coords","page","x","y","client","timeStamp","now","event","pointerUtils","coordsToEvent","startReflow","push","all","then","new","pointerType","signalArg","pointer","eventTarget","phase","prevEvent","updatePointer","setZeroCoords","delta","copyAction","_doPhase","undefined","start","_interacting","end","stop","removePointer","id","listeners","interactions:stop","_ref","remove"],"mappings":"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"}