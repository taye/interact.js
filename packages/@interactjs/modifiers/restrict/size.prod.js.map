{"version":3,"file":"size.prod.js","sources":["size.ts"],"sourcesContent":["import type { Point, Rect, Size } from '@interactjs/core/types'\nimport extend from '@interactjs/utils/extend'\nimport * as rectUtils from '@interactjs/utils/rect'\n\nimport { makeModifier } from '../base'\nimport type { ModifierArg, ModifierState } from '../types'\n\nimport type { RestrictEdgesState } from './edges'\nimport { restrictEdges } from './edges'\nimport type { RestrictOptions } from './pointer'\nimport { getRestrictionRect } from './pointer'\n\nconst noMin = { width: -Infinity, height: -Infinity }\nconst noMax = { width: +Infinity, height: +Infinity }\n\nexport interface RestrictSizeOptions {\n  min?: Size | Point | RestrictOptions['restriction']\n  max?: Size | Point | RestrictOptions['restriction']\n  endOnly: boolean\n  enabled?: boolean\n}\n\nfunction start(arg: ModifierArg<RestrictEdgesState>) {\n  return restrictEdges.start(arg)\n}\n\nexport type RestrictSizeState = RestrictEdgesState &\n  ModifierState<\n    RestrictSizeOptions & { inner: Rect; outer: Rect },\n    {\n      min: Rect\n      max: Rect\n    }\n  >\n\nfunction set(arg: ModifierArg<RestrictSizeState>) {\n  const { interaction, state, rect, edges } = arg\n  const { options } = state\n\n  if (!edges) {\n    return\n  }\n\n  const minSize =\n    rectUtils.tlbrToXywh(getRestrictionRect(options.min as any, interaction, arg.coords)) || noMin\n  const maxSize =\n    rectUtils.tlbrToXywh(getRestrictionRect(options.max as any, interaction, arg.coords)) || noMax\n\n  state.options = {\n    endOnly: options.endOnly,\n    inner: extend({}, restrictEdges.noInner),\n    outer: extend({}, restrictEdges.noOuter),\n  }\n\n  if (edges.top) {\n    state.options.inner.top = rect.bottom - minSize.height\n    state.options.outer.top = rect.bottom - maxSize.height\n  } else if (edges.bottom) {\n    state.options.inner.bottom = rect.top + minSize.height\n    state.options.outer.bottom = rect.top + maxSize.height\n  }\n  if (edges.left) {\n    state.options.inner.left = rect.right - minSize.width\n    state.options.outer.left = rect.right - maxSize.width\n  } else if (edges.right) {\n    state.options.inner.right = rect.left + minSize.width\n    state.options.outer.right = rect.left + maxSize.width\n  }\n\n  restrictEdges.set(arg)\n\n  state.options = options\n}\n\nconst defaults: RestrictSizeOptions = {\n  min: null,\n  max: null,\n  endOnly: false,\n  enabled: false,\n}\n\nconst restrictSize = {\n  start,\n  set,\n  defaults,\n}\n\nexport default makeModifier(restrictSize, 'restrictSize')\nexport { restrictSize }\n"],"names":["width","Infinity","noMax","start","arg","set","interaction","state","rect","edges","options","minSize","rectUtils","tlbrToXywh","getRestrictionRect","min","coords","noMin","maxSize","endOnly","extend","restrictEdges","noInner","inner","top","bottom","height","left","right","defaults","max","restrictSize","restrictSize$1","makeModifier"],"mappings":";;uVAYAA,WAAgBA,QAAgBC,KAAqBC,MAAA,CACrDF,UAAgBA,OAAgBC,KAAoB,SAACE,MAAAC,GAS5CD,OAAAA,cAA4CA,MAAAC,EACnD,CACF,SAAAC,IAAAD,GAWSC,MAAAA,YACDC,EAAAC,MAAED,EAAWE,KAAED,EAAKE,MAAED,GAAMC,WAC5BC,GAAEA,EAAS,MAEjB,OAEA,MAAAC,EAAAC,UAAAC,WAAAC,mBAAAJ,EAAAK,IAAAT,EAAAF,EAAAY,UAAAC,MAEMN,EACJC,UAAUC,WAAWC,mBAAmBJ,EAAQK,IAAYT,EAAaF,EAAIY,UAAYC,MAC3FV,EAAMW,QACJN,CAEFL,QAAMG,EAAUS,QACdA,MAAOC,OAAS,CAAA,EAAQC,cAAAC,SACxBC,MAAOH,OAAO,GAAIC,cAAcC,UAEjCb,EAAAe,KAEGf,EAAAA,QAAWc,MAAAC,IAAAhB,EAAAiB,OAAAd,EAAAe,OACbnB,EAAMG,QAAQa,MAAMC,IAAMhB,EAAKiB,OAASd,EAAQe,QACnCjB,WACRF,EAAAG,QAASa,aAASf,EAAAgB,IAAAb,EAAAe,OACvBnB,EAAMG,QAAQa,MAAME,OAASjB,EAAKgB,IAAMb,EAAQe,QAElDjB,EAAAkB,MACIlB,EAAAA,QAAYc,MAAAI,KAAAnB,EAAAoB,MAAAjB,EAAAX,MACdO,EAAMG,QAAQa,MAAMI,KAAOnB,EAAKoB,MAAQjB,EAAQX,OACnCS,UACRF,EAAAG,QAASa,MAAMK,MAAEpB,EAAAmB,KAAAhB,EAAAX,MACtBO,EAAMG,QAAQa,MAAMK,MAAQpB,EAAKmB,KAAOhB,EAAQX,OAElDqB,cAAAhB,IAAAD,GAEAiB,UAAchB,EAGhB,MAAAwB,SAAA,CAEAd,SACEA,IAAK,KACLe,SAAS,EACTX,SAAS,GAEVY,aAAA,CAED5B,YACEA,QACAE,mBAEF,IAAC2B,eAAAC,aAAAF,aAAA,uBAEDC,0BAAwCD"}